====== Sample: Drawing Arrowheads in a Display Conduit ======

===== C# =====
<code c#>
class DrawArrowHeadsConduit : Rhino.Display.DisplayConduit
{
  private Plane _plane;
  private Line _line;
  private double _scale;
  private const double DefaultArrowSize = 1.0;

  public DrawArrowHeadsConduit(Plane plane, Line line, double scale)
  {
    _plane = plane;
    _line = line;
    _scale = scale;
  }

  protected override void DrawForeground(Rhino.Display.DrawEventArgs e)
  {
    var from = _plane.ClosestPoint(_line.From);
    var to = _plane.ClosestPoint(_line.To);
    var dir = new Vector3d(to - from);
    dir.Unitize();
    var triangle = GetArrowHead(dir, to, _scale);
    e.Display.DrawLine(_line, System.Drawing.Color.Red);
    e.Display.DrawPolygon(triangle, System.Drawing.Color.Red, true);
  }

  private IEnumerable<Point3d> GetArrowHead(Vector3d dir, Point3d tip, double scale)
    {
      double arrowSize = DefaultArrowSize  * scale;

      var corners = new Point2d[3];
      var up = new Vector2d(-dir.Y, dir.X);
      corners[0] = new Point2d(tip.X, tip.Y);
      corners[1] = new Point2d((tip.X + arrowSize * (0.25 * up.X - dir.X)), (tip.Y + arrowSize * (0.25 * up.Y - dir.Y)));
      corners[2] = new Point2d((corners[1].X - 0.5 * arrowSize * up.X), (corners[1].Y - 0.5 * arrowSize * up.Y));

      var triangle = new Point3d[3];
      for (int i = 0; i < 3; i++)
        triangle[i] = new Point3d(_plane.PointAt(corners[i].X, corners[i].Y));
      return triangle;
    }
}

[System.Runtime.InteropServices.Guid("A7236E94-85BD-4D63-9950-19C268E63661")]
public class ex_conduitarrowheads : Rhino.Commands.Command
{
  public override string EnglishName { get { return "csDrawArrowHeads"; } }

  protected override Rhino.Commands.Result RunCommand(RhinoDoc doc, Rhino.Commands.RunMode mode)
  {
    var gp = new Rhino.Input.Custom.GetPoint();
    gp.SetCommandPrompt("Start of line");
    gp.Get();
    if (gp.CommandResult() != Rhino.Commands.Result.Success)
      return gp.CommandResult();

    var ptStart = gp.Point();

    gp.SetCommandPrompt("End of line");
    gp.SetBasePoint(ptStart, false);
    gp.DrawLineFromPoint(ptStart, true);
    gp.Get();
    if (gp.CommandResult() != Rhino.Commands.Result.Success)
      return gp.CommandResult();

    var ptEnd = gp.Point();
    var v = ptEnd - ptStart;
    if (v.IsTiny(Rhino.RhinoMath.ZeroTolerance))
      return Rhino.Commands.Result.Nothing;

    var line = new Line(ptStart, ptEnd);
    var plane = doc.Views.ActiveView.ActiveViewport.ConstructionPlane();

    var conduit = new DrawArrowHeadsConduit(plane, line, 1.0);
    // toggle conduit on/off
    conduit.Enabled = !conduit.Enabled;
    RhinoApp.WriteLine("draw arrowheads conduit enabled = {0}", conduit.Enabled);

    doc.Views.Redraw();
    return Rhino.Commands.Result.Success;
  }
}
</code>
===== VB.NET =====
<code vb>
Inherits Command

Shared _instance As ex_conduitarrowheads

Public Sub New()
  ' Rhino only creates one instance of each command class defined in a
  ' plug-in, so it is safe to store a refence in a static field.
  _instance = Me
End Sub

'''<summary>The only instance of this command.</summary>
Public Shared ReadOnly Property Instance() As ex_conduitarrowheads
  Get
    Return _instance
  End Get
End Property

'''<returns>The command name as it appears on the Rhino command line.</returns>
Public Overrides ReadOnly Property EnglishName() As String
  Get
    Return "vbDrawArrowHeads"
  End Get
End Property

Protected Overrides Function RunCommand(ByVal doc As RhinoDoc, ByVal mode As RunMode) As Result
  Dim gp = New Rhino.Input.Custom.GetPoint()
  gp.SetCommandPrompt("Start of line")
  gp.[Get]()
  If gp.CommandResult() <> Rhino.Commands.Result.Success Then
    Return gp.CommandResult()
  End If

  Dim ptStart = gp.Point()

  gp.SetCommandPrompt("End of line")
  gp.SetBasePoint(ptStart, False)
  gp.DrawLineFromPoint(ptStart, True)
  gp.[Get]()
  If gp.CommandResult() <> Rhino.Commands.Result.Success Then
    Return gp.CommandResult()
  End If

  Dim ptEnd = gp.Point()
  Dim v = ptEnd - ptStart
  If v.IsTiny(Rhino.RhinoMath.ZeroTolerance) Then
    Return Rhino.Commands.Result.[Nothing]
  End If

  Dim line = New Line(ptStart, ptEnd)
  Dim plane = doc.Views.ActiveView.ActiveViewport.ConstructionPlane()

  Dim conduit = New DrawArrowHeadsConduit(plane, line, 1.0)
  ' toggle conduit on/off
  conduit.Enabled = Not conduit.Enabled
  RhinoApp.WriteLine("draw arrowheads conduit enabled = {0}", conduit.Enabled)

  doc.Views.Redraw()
  Return Rhino.Commands.Result.Success
End Function
</code>
===== Python =====
<code python>
from pycharmdebug import pydevd
pydevd.settrace('localhost', port=5678)

import Rhino
import scriptcontext
import rhinoscriptsyntax as rs

class DrawArrowHeadsConduit(Rhino.Display.DisplayConduit):
  def __init__(self, plane, line, scale):
    self.plane = plane
    self.line = line
    self.scale = scale
    #Rhino.Display.DisplayPipeline.DrawForeground += self.DrawForeground

  def DrawForeground(self, e):
    fromPt = plane.ClosestPoint(line.From)
    toPt = plane.ClosestPoint(line.To)
    dir = Vector3d(toPt - fromPt)
    dir.Unitize()
    triangle = GetArrowHead(dir, to, scale)
    e.Display.DrawLine(line, System.Drawing.Color.Red)
    e.Display.DrawPolygon(triangle, System.Drawing.Color.Red, true)

  def GetArrowHead(self, dir, tip, scale):
      arrowSize = DefaultArrowSize  * scale

      corners = Point2d[3]
      up = Vector2d(-dir.Y, dir.X)
      corners[0] = Point2d(tip.X, tip.Y)
      corners[1] = Point2d((tip.X + arrowSize * (0.25 * up.X - dir.X)), (tip.Y + arrowSize * (0.25 * up.Y - dir.Y)))
      corners[2] = Point2d((corners[1].X - 0.5 * arrowSize * up.X), (corners[1].Y - 0.5 * arrowSize * up.Y))

      triangle = Point3d[3]
      for i in range(0,3):
        triangle[i] = Point3d(_plane.PointAt(corners[i].X, corners[i].Y))
      return triangle

def RunCommand():
  gp = Rhino.Input.Custom.GetPoint()
  gp.SetCommandPrompt("Start of line")
  gp.Get()
  if (gp.CommandResult() != Rhino.Commands.Result.Success):
    return gp.CommandResult()

  ptStart = gp.Point()

  gp.SetCommandPrompt("End of line")
  gp.SetBasePoint(ptStart, False)
  gp.DrawLineFromPoint(ptStart, True)
  gp.Get()
  if (gp.CommandResult() != Rhino.Commands.Result.Success):
    return gp.CommandResult()

  ptEnd = gp.Point()
  v = ptEnd - ptStart
  if (v.IsTiny(Rhino.RhinoMath.ZeroTolerance)):
    return Rhino.Commands.Result.Nothing

  line = Rhino.Geometry.Line(ptStart, ptEnd)
  plane = scriptcontext.doc.Views.ActiveView.ActiveViewport.ConstructionPlane()

  conduit = DrawArrowHeadsConduit(plane, line, 1.0)
  # toggle conduit on/off
  conduit.Enabled = True #not conduit.Enabled
  Rhino.RhinoApp.WriteLine("draw arrowheads conduit enabled = {0}", conduit.Enabled)

  scriptcontext.doc.Views.Redraw()
  return Rhino.Commands.Result.Success

if __name__=="__main__":
  RunCommand()
</code>

{{tag>Developer rhinocommon}}
