====== Adding User Strings to Objects ======
> **Developer:** //[[developer:cplusplusplugins|C++]]//
> **Summary:** //Demonstrates attaching custom user data to any object using the Rhino C++ SDK.//

User Data is a powerful SDK feature that allows third party developers to attach custom data of any kind to any object derived from ON_Object. To take advantage of User Data, you need to implement your own user data object by deriving a class from ON_UserData and overriding the required virtual functions.

In Rhino 4.0, the SDK adds a new standardized approach for adding User Data to objects called **user strings**. The Rhino 4.0 SDK lets you quickly attach User Data in the form of a key-value string pair to any object derived from ON_Object. This feature is exposed to the SDK as new member functions on ON_Object:

  * ON_Object::SetUserString - attaches a user string to an object. This information will persist through copy construction, operator=, and file IO.
  * ON_Object::GetUserString - gets a user string from an object.
  * ON_Object::GetUserStringKeys - retrieves a list of all user string keys on an object.
  * ON_Object::GetUserStrings - retrieves a list of all user strings on an object.

There are several advantages to user strings:

  - The mechanism is simple. You do not have to derive any new classes.
  - Rhino is responsible for all the file IO.
  - User strings can hold text of any length and format, including XML.
  - Since the mechanism is standard, you can share user strings between Rhino and other plug-ins. For example, you can use Rhino's **GetUserText** and **SetUserText** commands to get and set user strings. [[developer:rhinoscript|RhinoScript]] also provides methods to do the same.

=====Example=====

The following example demonstrates how to add user strings to a selected object.

=====C++=====
<code c++>
CRhinoCommand::result CCommandTest::RunCommand( const CRhinoCommandContext& context )
{
  bool bAttribute = true;

  CRhinoGetObject go;
  go.SetCommandPrompt( L"Select object to attach user text" );
  go.AddCommandOptionToggle( 
        RHCMDOPTNAME(L"Location"), 
        RHCMDOPTVALUE(L"Object"), 
        RHCMDOPTVALUE(L"Attribute"),
        bAttribute,
        &bAttribute
        );

  for(;;)
  {
    CRhinoGet::result res = go.GetObjects( 1, 1 );
    if( res == CRhinoGet::option )
      continue;
    if( res != CRhinoGet::object )
      return cancel;
    break;
  }

  const CRhinoObjRef& ref = go.Object(0);
  const CRhinoObject* obj = ref.Object();
  if( !obj )
    return failure;

  ON_wString key = L"test";
  ON_wString text = L"sample text";

  if( bAttribute )
  {
    // Attach user string to object's attributes
    CRhinoObjectAttributes attribs = obj->Attributes();
    attribs.SetUserString( key, text );
    context.m_doc.ModifyObjectAttributes( ref, attribs );
  }
  else
  {
    // Attach user string to object's geometry
    CRhinoObject* dupe = obj->DuplicateRhinoObject();
    if( dupe )
    {
      ON_Geometry* geom = const_cast<ON_Geometry*>( dupe->Geometry() ); 
      if( geom )
      {
        geom->SetUserString( key, text );
        context.m_doc.ReplaceObject( ref, dupe );
      }
    }
  }

  return success;
}
</code>


{{tag>Developer cplusplus}}
