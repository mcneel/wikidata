====Creating Rhino commands using the Python script editor====
----

It is possible, if a little convoluted, to create 'real' Rhino commands from Python scripts. Below I've outlined the procedure on Windows Rhino, with a couple of comments about where the files need to go for this all to work with Rhino for Mac. The initial template for the commands, along with a new GUID and the appropriate folders are created automatically by the Python script editor on Windows. So far it is possible but not obvious or automatic to //create// all this on Rhino for Mac - [[developer:python:commands#Rhino_for_Mac|see the note at the bottom of the page]]. It is possible to install the folders and scripts for an existing Python command on the Mac and have it all work. 

----

====Rhino for Windows====

Start in the Rhino Python editor - EditPythonScript command.
Click on the **New** icon, and choose **Command** in the ensuing dialog.

{{:developer:python:startanewcommandscript.png?}}

Name the command and name the plug-in that you'd like to have the command used in - it can be a new name or the one (last used) that is provided. I used MyNewCommand in MyNewPlug-In for this example.

A new script file is generated with the framework for the new command.

{{:developer:python:newcommandsscript.png?}}

On Rhino for Windows,the script is automatically saved in a special location

{{:developer:python:newcommandpyfile.png?}}


The code that the command calls is in this function: 

**def RunCommand( is_interactive ):**


Add your script code here - the template provides some dummy code and a couple of comments. , to be called from this part of the script. The whole script can be in this one function or you can add other functions as you normally would, as needed. Make sure to modify the initial "import" statements to suit the script you are writing - the automatic template "imports' are there for the example script provided.

What I do while developing the script is add this line at the bottom of the script:

**RunCommand(True)**

This allows me to test the script from the editor, debug etc. Just remember to comment that line before you distribute the script or try to use it as a command. It is also possible to write a more 'normal' script, test, etc. as needed in the usual way, then just copy and paste into this formatted command script template.


In order for this to run as a command in Rhino, the script location needs to be exactly right so that Rhino knows where to look. On Windows, the path for a command script looks like this:

//C:\Users\USERNAME\AppData\Roaming\McNeel\Rhinoceros\5.0\Plug-ins\PythonPlugIns\MyNewPlug-In {146e099d-760d-4a6c-8662-96119f3fd62f}//

{{:developer:python:newcommandpluginfolder.png?}}

and it must keep that crazy name with the GUID in brackets, and the path that the editor set up when you created the command initially.

To distribute the script as a plug-in, zip the entire folder, in this case making

 //MyNewPlug-In {146e099d-760d-4a6c-8662-96119f3fd62f}.zip// 

On Windows, users will need to unzip to the plug-ins folder listed above, with Rhino closed.


=== To make an "rhi" installer for Windows: ===

In the 'dev' sub-folder that is created in the plug-in folder, create a py file named "__plugin__.py"  that has only these three lines:

 id="{146e099d-760d-4a6c-8662-96119f3fd62f}"

 version="1.0.0.1"

 title="MyNewCommand" 

 
 line 1 has the UUID from the plug-in, found in the folder name.

 line 2 has the version - it would be up to you to keep that current.

 line 3 has the command name.

(note the "double-quotes" above)
 
With this file in place in the "dev" sub-folder, then you can zip the containing plug-in folder (MyNewPLugIn{146e099d etc etc}) and then rename it from **.zip** to the **.rhi** extension.  Double clicking this rhi file on another system (Rhino closed) should install all the files in the correct location for that user. Rhino should then see the command as a regular command.

Note: using this system, I've seen, at least sometimes, that Rhino requires that Python be loaded before it can see the command the first time in a session - running EditPythonScript, or any other script will kick Python into gear and let the command work. This is a bug as far as I know.

====Rhino for Mac:====
Setting this up on OSX is a bit more labour intensive, but once you see how it works, I think it should be fairly straightforward. There are four things you need to pay attention to:

The py script file
 
The plug-in name

The command name

The plug-in GUID

On OSX, the location of the plug-in folders must be in:
///Users/USERNAME/Library/Application Support/McNeel/Rhinoceros/MacPlugIns/PythonPlugIns///
If the PythonPlugIns folder does not yet exist, you'll have to create it.

Within that folder there needs to be a folder for each command plug-in such as

//PythonPlugIns/MyNewPlug-In {146e099d-760d-4a6c-8662-96119f3fd62f}// 

and within the individual plug-in's folder there is yet another folder called "dev" - that is where the Python script itself should be saved. The script name must have a special format as well - again, not automatic on Rhino for Mac, so you'll need to be careful to get it right. The file name must be in the format

CommandName_cmd.py
There can be multiple command files in the folder - one for each command in the plug-in.

The long messy number thing in braces is the GUID - that GUID, and in fact the folder itself, is automatically generated on Rhino for Windows when you tell the editor you want to create a command - on OSX you need to create the GUID and the folder and "dev" sub-folder yourself. [[https://www.guidgenerator.com/online-guid-generator.aspx|Here]] is an on-line GUID generator - there are others, but this one worked in my tests. Generate a GUID and then use it in the folder name as indicated above - PlugInName{GUID}

The Python script itself has to be set up and named correctly as well - this is done from a template on Rhino for Windows, we'll need to do it by hand, so to speak, on OSX. The py file should be set up like this:

    #import statements as needed:
    import rhinoscriptsyntax as rs
    import scriptcontext as sc
    import Rhino
    #this line with the name of the command:
    __commandname__ = "MyNewCommand"
    def RunCommand( is_interactive ):
         #Your code in here
         obj = rs.GetObject()
         if obj:
             print "Got an object"
         etc.
     
     
Again this command script must be saved to 

///Users/USERNAME/Library/Application Support/McNeel/Rhinoceros/MacPlugIns/PythonPlugIns/PlugInName{GUID}/dev//

Note the command name must match the script file name, so in this example the file name would be

MyNewCommand_cmd.py

----

Please let me know if there are errors or if you think it could all be made clearer. pascal@mcneel.com

 