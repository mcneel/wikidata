======Adding Plug-in RhinoScript to Monkey======
> **Developer:** //[[developer:cplusplusplugins|C++]]//
> **Summary:** //Demonstrates how to add your plug-in RhinoScript support to Monkey editor tree.//

=====Overview=====
If your plug-ins extends the [[developer:rhinoscript|RhinoScript]] scripting, then you can add it to [[developer:monkeyforrhino4|Monkey RhinoScript Editor]]

  * Create a .syntaxml description file that includes your plugin methods.
  * Compile and save the .syntaxml file in Monkey\Resources directory

=====Details=====
To create the description file, use **MonkeySyntaxTreeEditor** command.

Be sure to increase the version number when you make a change or Monkey won't realize it has to recreate the dll caches.

Here is how to create your plug-in syntax tree that you can use from within Monkey:

1.) Click the New icon:  this creates new tree.  the name of the tree should match the name of your plugin.
\\

{{:legacy:en:step2.PNG}}

2.) Add your functions and define parameters and return values. You can also type a signature string in the property box directly, Monkey will attempt to parse the signature. Hence, if you type something like:

<code vb>
  AddGeometry(intType, blnRedraw, dblSize) as RhObject
</code>

Will be properly parsed into:

<code vb>
  AddGeometry(ByVal intType As Integer, ByVal blnRedraw As Boolean, ByVal dblSize As Double) As RhObject
</code>

You can make minor adjustments inside this signature string as well, such as replacing "ByVal" by "ByRef" or changing parameter types.
\\

{{:legacy:en:step3.PNG}}

3.) When done, compile then save in Monkey resources folder.
\\

{{:legacy:en:step4.PNG}}

4.) Open Monkey editor and your plugin tree should show.
\\
{{:legacy:en:step5.PNG}}

\\

{{tag>Developer cplusplus}}
