====== VBScript Statements ======
> **Developer:** [[developer:rhinoscript|RhinoScript]]
> **Summary:** //Overview of VBScript statements.//

=====See also=====
[[developer:vbsfundamentals|VBScript Fundamentals]]

=====Overview=====
Many scripting and programing languages such as JScript, C#, and C++ do not attempt to match the code of the actual physical lines typed into the text editor. This is because they do not recognize the end of a line of code until they see the termination character (in these cases, the semicolon). So, the actual physical lines of type taken up by the code are irrelevant.

By contrast, VBScript uses the //carriage return// instead of a special line termination character. To end a statement in VBScript, you do not have to type in a semicolon or other special character. You simply press **Enter**. 

For example, this code will generate a syntax error:

<code vb>
   Set
   objFSO
   =
   CreateObject("Scripting.FileSystemObject")
</code>

This will not:

<code vb>
   Set objFSO = CreateObject("Scripting.FileSystemObject")
</code>

In general, not requiring a statement termination character simplifies script writing in VBScript. But there is one complication: To enhance readability, we recommend that you limit the length of any single line of code to 80 characters. What happens if you have a line of code that contains more than 80 characters?

Although it might seem like the obvious solution, you cannot split a statement into multiple lines with a carriage return. For example, the following code snippet returns a run-time error in VBScript because a statement was split by using **Enter**.

<code vb>
   strMessageToDisplay = strUserFirstName & " " & strUserMiddleInitial & " "
   & strUserLastName
   Rhino.Print strMessageToDisplay
</code>

You cannot split a statement into multiple lines in VBScript with **Enter** because VBScript sees a carriage return as marking the end of a statement. In the preceding example, VBScript interprets the first line as the first statement in the script. Next, it interprets the second line as the second statement in the script. The error occurs because //strUserLastName// is not a valid VBScript statement.

Instead, use the **underscore** (_) to indicate that a statement continues on the next line. In the revised version of the script, a blank space and an underscore indicates that the statement started on line 1 continues on line 2. To make it more clear that line 2 is a continuation of line 1, line 2 is also indented four spaces. (This is not necessary, but does improve readability.)

<code vb>
   strMessageToDisplay = strUserFirstName & " " & strUserMiddleInitial & " " _
     & strUserLastName
   Rhino.Print strMessageToDisplay
</code>

Line continuation is more complex when you try to split a statement inside a set of quotation marks. For example, suppose you split this statement using a blank space and an underscore:

<code vb>
   strMessage = "If you ask me anything I don't know, _
     I'm not going to answer."
   Rhino.Print strMessage
</code>

If you run this script, you will encounter a run-time error. This is because the line continuation character is inside a set of quotation marks (and is therefore considered part of the string). To split this statement:

  - Close the first line with quotation marks, and then insert the blank space and the underscore.
  - Use an ampersand at the beginning of the second line. This indicates that line two is a continuation of the interrupted string in line 1.
  - Add quotation marks before continuing the statement.

These quotation marks show that this line should be part of the quoted string started on the previous line. Without the quotation marks, the script engine will interpret the continued line as a VBScript statement. Because this is not a valid VBScript statement, an error will occur.

The revised statement looks like this:

<code vb>
   strMessage = "If you ask me anything I don't know, " _
     & " I'm not going to answer."
   Rhino.Print strMessage
</code>

When splitting statements this way, be careful to insert spaces in the proper location.



{{tag>Developer RhinoScript}}
