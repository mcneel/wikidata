===== Sample: Create Meshes from Brep =====

===== C# =====
<code c#>
[System.Runtime.InteropServices.Guid("BF92CA69-3628-4167-96C1-3FA90E460333")]
public class ex_createmeshfrombrep : Rhino.Commands.Command
{
  public override string EnglishName { get { return "csCreateMeshesFromBreps"; } }

  protected override Rhino.Commands.Result RunCommand(RhinoDoc doc, Rhino.Commands.RunMode mode)
  {
    var gs = new Rhino.Input.Custom.GetObject();
    gs.SetCommandPrompt("Select surface or polysurface to mesh");
    gs.GeometryFilter = Rhino.DocObjects.ObjectType.Surface | Rhino.DocObjects.ObjectType.PolysrfFilter;
    gs.AcceptNothing(true);
    gs.Get();
    if (gs.CommandResult() != Rhino.Commands.Result.Success)
      return gs.CommandResult();
    var brep = gs.Object(0).Brep();
    if (null == brep)
      return Rhino.Commands.Result.Failure;

    var jaggedAndFaster = Rhino.Geometry.MeshingParameters.Coarse;
    var smoothAndSlower = Rhino.Geometry.MeshingParameters.Smooth;
    var defaultMeshParams = Rhino.Geometry.MeshingParameters.Default;
    var minimal = Rhino.Geometry.MeshingParameters.Minimal;

    var meshes = Rhino.Geometry.Mesh.CreateFromBrep(brep, smoothAndSlower);
    if (meshes == null || meshes.Length == 0)
      return Rhino.Commands.Result.Failure;

    var brepMesh = new Rhino.Geometry.Mesh();
    foreach (var mesh in meshes)
      brepMesh.Append(mesh);
    doc.Objects.AddMesh(brepMesh);
    doc.Views.Redraw();

    return Rhino.Commands.Result.Success;
  }
}
</code>
===== VB.NET =====
<code vb>
<System.Runtime.InteropServices.Guid("E8056E7A-3014-4A06-AA20-EB483AB6E103")> _
Public Class ex_createmeshfrombrep
  Inherits Rhino.Commands.Command
  Public Overrides ReadOnly Property EnglishName() As String
    Get
      Return "vbCreateMeshesFromBreps"
    End Get
  End Property

  Protected Overrides Function RunCommand(doc As RhinoDoc, mode As Rhino.Commands.RunMode) As Rhino.Commands.Result
    Dim gs = New Rhino.Input.Custom.GetObject()
    gs.SetCommandPrompt("Select surface or polysurface to mesh")
    gs.GeometryFilter = Rhino.DocObjects.ObjectType.Surface Or Rhino.DocObjects.ObjectType.PolysrfFilter
    gs.AcceptNothing(True)
    gs.[Get]()
    If gs.CommandResult() <> Rhino.Commands.Result.Success Then
      Return gs.CommandResult()
    End If
    Dim brep = gs.[Object](0).Brep()
    If brep Is Nothing Then
      Return Rhino.Commands.Result.Failure
    End If

    Dim jaggedAndFaster = Rhino.Geometry.MeshingParameters.Coarse
    Dim smoothAndSlower = Rhino.Geometry.MeshingParameters.Smooth
    Dim defaultMeshParams = Rhino.Geometry.MeshingParameters.[Default]
    Dim minimal = Rhino.Geometry.MeshingParameters.Minimal

    Dim meshes = Rhino.Geometry.Mesh.CreateFromBrep(brep, smoothAndSlower)
    If meshes Is Nothing OrElse meshes.Length = 0 Then
      Return Rhino.Commands.Result.Failure
    End If

    Dim brepMesh = New Rhino.Geometry.Mesh()
    For Each mesh As Rhino.Geometry.Mesh In meshes
      brepMesh.Append(mesh)
    Next
    doc.Objects.AddMesh(brepMesh)
    doc.Views.Redraw()

    Return Rhino.Commands.Result.Success
  End Function
End Class
d Namespace
</code>
===== Python =====
<code python>
import Rhino
import System
import rhinoscriptsyntax as rs
from scriptcontext import doc

def RunCommand():
  gs = Rhino.Input.Custom.GetObject()
  gs.SetCommandPrompt("Select surface or polysurface to mesh")
  gs.GeometryFilter = Rhino.DocObjects.ObjectType.Surface | Rhino.DocObjects.ObjectType.PolysrfFilter
  gs.AcceptNothing(True)
  gs.Get()
  if gs.CommandResult() != Rhino.Commands.Result.Success:
    return gs.CommandResult()
  brep = gs.Object(0).Brep()
  if None == brep:
    return Rhino.Commands.Result.Failure

  jaggedAndFaster = Rhino.Geometry.MeshingParameters.Coarse
  smoothAndSlower = Rhino.Geometry.MeshingParameters.Smooth
  defaultMeshParams = Rhino.Geometry.MeshingParameters.Default
  minimal = Rhino.Geometry.MeshingParameters.Minimal

  meshes = Rhino.Geometry.Mesh.CreateFromBrep(brep, smoothAndSlower)
  if meshes == None or meshes.Length == 0:
    return Rhino.Commands.Result.Failure

  brepMesh = Rhino.Geometry.Mesh()
  for mesh in meshes:
    brepMesh.Append(mesh)
  doc.Objects.AddMesh(brepMesh)
  doc.Views.Redraw()

if __name__ == "__main__":
  RunCommand()
</code>

{{tag>Developer rhinocommon}}
