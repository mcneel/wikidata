====== Info: Modeless Dialog Box in Plug-In Does Not Process TAB Key ======
> **Developer:** //[[developer:cplusplusplugins|C++]]//
> **Summary:** //Information on how to make the TAB key work from modeless dialog boxes.//
> **WARNING:** //This page may be out-of-date.//

When a modeless dialog box is launched from a Rhino plug-in (DLL), the TAB key and the arrow keys do not move the focus from control to control as you would expect.

For a modeless dialog box to process a TAB key, the message pump needs to call the IsDialogMessage API. However, if you are writing a Rhino plug-in, you cannot modify the Rhino message pump to do this.

To work around this problem, you can use a WH_GETMESSAGE hook to capture the keystroke messages and call the IsDialogMessage API. If IsDialogMessage returns TRUE, then do not pass the message on to the message pump. Set the hook when handling WM_INITDIALOG and unset it when handling the WM_DESTROY message.

The following code illustrates how to set and unset the hook as well as how to use IsDialogMessage() to process TAB key messages:


<code c++>
BOOL CALLBACK DllDlgProc( HWND hwndDlg, UINT uMsg,
                          WPARAM wParam, LPARAM lParam )
{
  switch( uMsg )
  {
  case WM_INITDIALOG:
    hHook = SetWindowsHookEx( WH_GETMESSAGE, GetMsgProc,
                              NULL, GetCurrentThreadId() );
    return TRUE;
  case WM_COMMAND:
    if( LOWORD(wParam) == IDOK | LOWORD(wParam) == IDCANCEL ) 
    {
      DestroyWindow( hwndDlg );
      hwndDllDlg = NULL;
    }
    return TRUE;
  case WM_DESTROY:
    UnhookWindowsHookEx( hHook );
    return FALSE;
  }
  return FALSE;
} 

</code>
The hook procedure, GetMsgProc, should resemble the following:


<code c++>
LRESULT FAR PASCAL GetMsgProc( int nCode, WPARAM wParam, LPARAM lParam )
{
  LPMSG lpMsg = (LPMSG)lParam;

  if( nCode >= 0 && PM_REMOVE == wParam )
  {
    // Don't translate non-input events.
    if( (lpMsg->message >= WM_KEYFIRST && lpMsg->message <= WM_KEYLAST) )
    {
      if( IsDialogMessage(hwndDllDlg, lpMsg) )
      {
        // The value returned from this hookproc is ignored, 
        // and it cannot be used to tell Windows the message
        // has been handled. To avoid further processing,
        // convert the message to WM_NULL before returning.
        lpMsg->message = WM_NULL;
        lpMsg->lParam = 0;
        lpMsg->wParam  = 0;
      }
    }
  }
  return CallNextHookEx(hHook, nCode, wParam, lParam);
} 

</code>


{{tag>Developer cplusplus}}