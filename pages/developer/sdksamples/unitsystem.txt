======Retrieve the Unit System of the Active Document ======

> **Developer:** //[[developer:cplusplusplugins|C++]]//
> **Summary:** //Demonstrates how to determine the current unit system of the current document.//

The unit system of the active document is stored in an ON_3dmUnitsAndTolerances class that is located on the CRhinoDoc object.

If you are inside of a CRhinoCommand-derived object's RunCommand() member, you can get the current units system as follows:

<code c++>
const CRhinoDocProperties& doc_props = context.m_doc.Properties();
const ON_3dmUnitsAndTolerances& units = doc_props.ModelUnitsAndTolerances();
ON::unit_system units_system = units.m_unit_system;
</code>

As a shortcut, you can do the following:

<code c++>
ON::unit_system units_system = context.m_doc.UnitSystem();
</code>

If you are outside of a CRhinoCommand-derived object's RunCommand() member, you can get the current units system as follows:

<code c++>
CRhinoDoc* doc = RhinoApp().ActiveDoc();
if( doc )
{
  ON::unit_system units_system = doc->UnitSystem();
}
</code>

----

=====Rhino 4 changes=====
With the addition of layouts in Rhino 4, two unit systems are now associated with a document, model, and page units. A new class has been added to [[developer:opennurbs:home|openNURBS]] call ON_UnitSystem which makes it easier to work with custom units. The Rhino document class now contains two functions:

  * const ON_UnitSystem& ModelUnits() const;
  * const ON_UnitSystem& PageUnits() const;
  
=====C++=====

<code c++>
ON_UnitSystem units = doc->ModelUnits();
</code>
  
{{tag>Developer cplusplus}}