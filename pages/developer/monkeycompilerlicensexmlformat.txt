====== Monkey Script Compiler License XML format ======
> **Summary:** //A description of the structure of the XML license table.//

----

If you want to automate a license system for your Monkey Compiled plugin, you should probably use the XML license table format. The Monkey Script Compiler can save an xml file with any number of [[developer:monkeycompilerlicensing|valid licenses]] (for a particular product password). This Wiki page is a description of the xml structure of that file:

The XML document has a single node called <monkeycompilerlicensedata> which in turn contains four subitems:

  * <color blue> <monkeycompilerlicensedata></color>
    * <color gray> <!--Monkey Compiler Project License Data--></color>
    * <color gray> <!--29 April 2007 13:15:43--></color>
    * <color blue> <settings></color>
    * <color blue> <keylist></color>

----

The //settings// node contains all relevant project data, grouped into two categories:
  * <color blue> <settings></color>
    * <color blue> <project></color>
    * <color blue> <license></color>

The //project// node contains information about the manufacturer and the plugin:

  * <color blue> <project></color>
    * <color blue> <name> </color><color black> Exampleplugin </color><color blue> </name></color>
    * <color blue> <version> </color><color black> 1.0.0.1 </color><color blue> </version></color>
    * <color blue> <organization> </color><color black> Some Company </color><color blue> </organization></color>
    * <color blue> <website> </color><color black> www.Something.com </color><color blue> </website></color>
    * <color blue> <updateurl> </color><color black> www.Something.com/ExamplePlugin1.html </color><color blue> </updateurl></color>
    * <color blue> <plugin_uuid> </color><color black> 07ac1c1b-7b52-45a4-074e-bd075c2d6c40 </color><color blue> </plugin_uuid></color>

While the //license// node contains the license password and code:

  * <color blue> <license></color>
    * <color blue> <hash> </color><color black> When I was little I had a dog named Borka </color><color blue> </hash></color>
    * <color blue> <prefix> </color><color black> EXAM </color><color blue> </prefix></color>

----

The //keylist// node contains a //keycount// subnode which indicates the number of defined licenses, and a number of identically named //licensekey// subnodes, each of which represents a single valid license data block:

  * <color blue> <keylist></color>
    * <color blue> <keycount> </color><color black> 1000 </color><color blue> </keycount></color>
    * <color blue> <licensekey></color>
    * <color blue> <licensekey></color>
    * ....
    * <color blue> <licensekey></color>
    * <color blue> <licensekey></color>

//Licensekey// nodes contain a license string, and they have a number of empty fields for customer information. Of course when you have an XML parser in place it is very easy to add custom fields, but the standard ones are already included...

  * <color blue> <licensekey></color>
    * <color blue> <customer></color>
      * <color blue> <name> </color><color black> unassigned </color><color blue> </name></color>
      * <color blue> <contact> </color><color black> unassigned </color><color blue> </contact></color>
      * <color blue> <date> </color><color black> unassigned </color><color blue> </date></color>
      * <color blue> <info> </info></color>
    * <color blue> <key> </color><color black> EXAM - 7I1Z - 9J2E - 5E7Q - 2716 </color><color blue> </key></color>

----

{{tag>Developer RhinoScript_Monkey}}