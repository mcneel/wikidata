=====RhinoMobile=====
{{:developer:rhinomobile_banner.png|}}
=====Downloads & Links=====

Developer Tools:
  * [[http://xamarin.com/download|Xamarin]] Starter Edition (aka: Free) or better.  30-day free trial and academic pricing available.
  * [[http://developer.apple.com/xcode/|Xcode]] on a Mac running OS X 10.8 (Mountain Lion) or greater is necessary for building iOS apps.
  * [[http://www.microsoft.com/visualstudio/eng/downloads|Visual Studio 2012]]: Non-Express editions only (Xamarin's extensions require paid versions).
  * [[http://software.intel.com/en-us/articles/intel-hardware-accelerated-execution-manager/|Intel Hardware Accelerated Execution Manager]] provides hardware-acceleration for Android emulators.

Required Libraries & Samples:
  * [[http://github.com/mcneel/rhinocommon|RhinoCommon]] The .NET plug-in SDK for Rhino and Grasshopper.
  * [[http://www.rhino3d.com/opennurbs|openNURBS]] Download: C++ openNURBS SDK.
  * [[http://github.com/mcneel/RhinoMobile|RhinoMobile]] (COMING SOON)
  * [[http://github.com/mcneel/RhinoMobileSamples|RhinoMobileSamples]] (COMING SOON)
=====Overview=====

**What is RhinoMobile?**
RhinoMobile is a C# .NET library for the development of 3D, cross-platform, mobile applications.  RhinoMobile - like RhinoCommon - is based on the Xamarin Mono framework, a fully-functional .NET runtime that works on Android, iOS and OS X.  RhinoMobile uses openNURBS (the 3dm NURBS library) and RhinoCommon  (the .NET SDK for Rhinoceros and Grasshopper) and handles file IO, gesture recognition and 3D display (OpenGL ES 2.0).

**Who should use RhinoMobile?**
Anyone interested in developing, prototyping, or just experimenting with 3D mobile development who wants to use C# and target as many devices as possible.  You should know some C# and .NET. Familiarity with RhinoCommon helps.

**Great, how do I begin?**
  - [[getting_started|Getting Started]]: Tooling up.
  - [[rhinomobile#HelloRhinoMobile|HelloRhinoMobile]]: Building a demo project.
  - [[rhinomobile#Xamarin Studio|Xamarin Studio]]: Getting used to the Xamarin IDE.
  - [[rhinomobile#Simulators & Emulators|Simulators & Emulators]]: How to properly setup simulators and emulators.
  - [[rhinomobile#Devices & Testing|Devices & Testing]]: How to get your devices setup for testing.
  - [[rhinomobile#Setup Your Project|Setup Your Project]]: Step-by-step setting up your own project.
  - [[rhinomobile#Rendering Pipeline|Rendering Pipeline]]: A walkthrough of how pixels are pumped to the screen.
  - [[rhinomobile#Using Visual Studio|Using Visual Studio]]: Some notes on using our favorite IDE.
  - [[rhinomobile#Profiling & Performance|Profiling & Performance]]: Tools available for analyzing, profiling, and tuning your code.
  - [[rhinomobile#Other Links & Libraries|Other Links & Libraries]]: A collection of other useful libraries and resources.

**Where can I get help?**
Visit the Rhino Forum and post your question in the [[http://discourse.mcneel.com/category/rhino-developer|Rhino Developer Category]] or e-mail the developer directly: [[mailto:dan@mcneel.com|dan@mcneel.com]].

=====HelloRhinoMobile=====

=====Xamarin Studio=====

   * Command+. = Global Search (class:  line:)
   * Command+F = Find.  You can pin search results.
   * Command+D = Go to Declaration (find where it's declared)
   * Command+Shift+R = Go to References (show all occurrences)
   * Preferences.  Line numbers on.  Enable Source analysis.  Enable code folding, etc.
   * Alt+Enter = Context Actions (Resharper style)
   * Ctrl+Alt+Space = automatically add using directive
   * Alt + Up/Down arrows = take line up or down.
   * Alt + Shift + Up/Down arrows = expand/contract selection around cursor.
   * Debugger options: Debug project only code is on by default.  Switch it off if you want to step into non-project code.
=====Simulators & Emulators=====

=====Devices & Testing=====

=====Setup Your Project=====

Notes on the cloned project approach.

  - In Xamarin Studio, create an empty Solution.  For our purposes, we'll call this //YourProjectMobile//, but you can call it whatever you like, as long as you follow the naming conventions.
  - Add a new project to the //YourProjectMobile// Solution.  Use C# Library project.  Call it //YourProject.Core//.  This creates an empty project that will be used as the template for the Cloned Project.
  - Add an Android C# Library Project called //YourProject.Core.Droid//.
  - Add a iOS C# Library Project called //YourProject.Core.Touch//.
  - In Finder, move the contents of //YourProject.Core.Droid// and //YourProject.Core.Touch// into the //YourProject.Core// folder.
  - In Xamarin Studio, remove (not delete) all the added projects.
  - In Xamarin Studio, Add Existing projects //YourProject.Core.Touch// and //YourProject.Core.Droid// (this time from their new home in //YourProject.Core// folder) to the Solution.
  - Delete //YourProject.Core.csproj//.

TO BE CONTINUED...
=====Rendering Pipeline=====

=====Using Visual Studio=====

=====Profiling & Performance=====

=====Other Links & Libraries=====

  * [[http://github.com/koush/sqlite-net|SQLite.NET]]: A cross-platform database library that works on Android, iOS, and WindowsPhone.
  * [[http://github.com/slodge/MvvmCross|MvvmCross]]: Stuart Lodge's fantastic (and well supported) [[http://en.wikipedia.org/wiki/Model_View_ViewModel|Model-View-ViewModel]] (MVVM) library.
  * [[http://github.com/rdio/vernacular|Vernacular]]: Rdio's localization/internationalization toolkit that works well with Xamarin projects.
  * [[http://docs.xamarin.com/guides/ios/advanced_topics/binding_objective-c/objective_sharpie|Objective Sharpie]]: Xamarin's utility for scanning your existing Objective-C libraries and creating automated bindings.