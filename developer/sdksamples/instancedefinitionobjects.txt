====== Block Definition Geometry ======
> **Summary:** //Demonstrates how to obtain a block instance's definition geometry.//

=====Question=====
Is it possible to list all of the geometry that defines a block instance?

=====Answer=====
If you have a block instance object, then you simply need to get it's instance definition. Once you have its instance definition, you can query it for all of its definition geometry.

The following code demonstrates how to do this interactively.

===== C++ =====
<code c++>
CRhinoCommand::result CCommandTest::RunCommand( const CRhinoCommandContext& context )
{
  CRhinoGetObject go;
  go.SetCommandPrompt(L"Select instance");
  go.SetGeometryFilter(CRhinoGetObject::instance_reference);
  go.GetObjects(1, 1);
  if (go.CommandResult() != CRhinoCommand::success)
    return go.CommandResult();

  const CRhinoInstanceObject* iref = CRhinoInstanceObject::Cast(go.Object(0).Object());
  if (iref == 0)
    return CRhinoCommand::failure;

  const CRhinoInstanceDefinition* idef = iref->InstanceDefinition();
  if (idef == 0)
    return CRhinoCommand::failure;

  ON_SimpleArray<const CRhinoObject*> objects;
  int count = idef->GetObjects(objects);
  for (int i = 0; i < count; i++ )
  {
    const CRhinoObject* obj = objects[i];
    if (obj != 0)
    {
      ON_wString str;
      ON_UuidToString( obj->Attributes().m_uuid, str );
      RhinoApp().Print(L"Object %d = %s\n", i, str);
    }
  }

  return CRhinoCommand::success;
}
</code>

===== C# =====
<code c#>
public override IRhinoCommand.result RunCommand(IRhinoCommandContext context)
{
  MRhinoGetObject go = new MRhinoGetObject();
  go.SetCommandPrompt("Select instance");
  go.SetGeometryFilter(IRhinoGetObject.GEOMETRY_TYPE_FILTER.instance_reference);
  go.GetObjects(1, 1);
  if (go.CommandResult() != IRhinoCommand.result.success)
    return go.CommandResult();

  IRhinoInstanceObject iref = MRhinoInstanceObject.ConstCast(go.Object(0).Object());
  if (iref == null)
    return IRhinoCommand.result.failure;

  IRhinoInstanceDefinition idef = iref.InstanceDefinition();
  if (idef == null)
    return IRhinoCommand.result.failure;

  IRhinoObject[] objects = null;
  int count = idef.GetObjects(out objects);
  for (int i = 0; i < count; i++ )
  {
    IRhinoObject obj = objects[i];
    if (obj != null)
      RhUtil.RhinoApp().Print(string.Format("Object {0} = {1}\n", i, obj.Attributes().m_uuid.ToString()) );
  }

  return IRhinoCommand.result.success;
}
</code>


{{tag>Developer cplusplus dotnet}}
