===== Sample: Get the point at the current cursor position =====

===== C# =====
<code c#>
[System.Runtime.InteropServices.Guid("1552E348-A3B8-42B9-9948-829F9BA0D9C4")]
public class ex_pointatcursor : Rhino.Commands.Command
{
  public override string EnglishName { get { return "csPointAtCursor"; } }

  [System.Runtime.InteropServices.DllImport("user32.dll")]
  public static extern bool GetCursorPos(out System.Drawing.Point pt);
 
  [System.Runtime.InteropServices.DllImport("user32.dll")]
  public static extern bool ScreenToClient(IntPtr hWnd, ref System.Drawing.Point pt);

  protected override Rhino.Commands.Result RunCommand(RhinoDoc doc, Rhino.Commands.RunMode mode)
  {
    var rslt = Rhino.Commands.Result.Failure;
    var view = doc.Views.ActiveView;
    if (view != null)
    {
      System.Drawing.Point pt;
      if (GetCursorPos(out pt) && ScreenToClient(view.Handle, ref pt))
      {
        var xform = view.ActiveViewport.GetTransform(Rhino.DocObjects.CoordinateSystem.Screen, Rhino.DocObjects.CoordinateSystem.World);
        if (xform != null)
        {
          var point = new Rhino.Geometry.Point3d(pt.X, pt.Y, 0.0);
          RhinoApp.WriteLine(String.Format("screen point: ({0}, {1}, {2})", point.X, point.Y, point.Z));
          point.Transform(xform);
          RhinoApp.WriteLine(String.Format("world point: ({0}, {1}, {2})", point.X, point.Y, point.Z));
          rslt = Rhino.Commands.Result.Success;
        }
      }
    }
    return rslt;
  }
}
</code>
===== VB.NET =====
<code vb>
<System.Runtime.InteropServices.Guid("B1999883-CE95-4727-A047-4CD3881AD866")> _
Public Class ex_pointatcursor
  Inherits Rhino.Commands.Command
  Public Overrides ReadOnly Property EnglishName() As String
    Get
      Return "vbPointAtCursor"
    End Get
  End Property

  <System.Runtime.InteropServices.DllImport("user32.dll")> _
  Public Shared Function GetCursorPos(ByRef pt As System.Drawing.Point) As Boolean
  End Function

  <System.Runtime.InteropServices.DllImport("user32.dll")> _
  Public Shared Function ScreenToClient(hWnd As IntPtr, ByRef pt As System.Drawing.Point) As Boolean
  End Function

  Protected Overrides Function RunCommand(doc As RhinoDoc, mode As Rhino.Commands.RunMode) As Rhino.Commands.Result
    Dim rslt = Rhino.Commands.Result.Failure
    Dim view = doc.Views.ActiveView
    If view IsNot Nothing Then
      Dim pt As System.Drawing.Point
      If GetCursorPos(pt) AndAlso ScreenToClient(view.Handle, pt) Then
        Dim xform = view.ActiveViewport.GetTransform(Rhino.DocObjects.CoordinateSystem.Screen, Rhino.DocObjects.CoordinateSystem.World)
        If xform <> Nothing Then
          Dim point = New Rhino.Geometry.Point3d(pt.X, pt.Y, 0.0)
          RhinoApp.WriteLine([String].Format("screen point: ({0}, {1}, {2})", point.X, point.Y, point.Z))
          point.Transform(xform)
          RhinoApp.WriteLine([String].Format("world point: ({0}, {1}, {2})", point.X, point.Y, point.Z))
          rslt = Rhino.Commands.Result.Success
        End If
      End If
    End If
    Return rslt
  End Function
End Class
d Namespace
</code>

{{tag>Developer rhinocommon}}
