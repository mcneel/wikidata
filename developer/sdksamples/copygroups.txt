====== Duplicating Objects with Group ======
> **Developer:** //[[developer:cplusplusplugins|C++]], [[developer:dotnetplugins|.NET]]//
> **Summary:** //Demonstrates how to duplicate objects that are members of one or more object groups.//

===== Question =====
When I duplicate a Rhino object which happens to be a member of a group group, the duplicate object is (also) a member of that same group. Is there a quick way to duplicate a Rhino object and have the duplicated object be a member of a new group?

===== Answer =====
If you are using C++, then you can use the **RhinoUpdateObjectGroups** SDK function. See rhinoSdkGrips.h for details. 

Here is an example of its usage:

==== C++ ====
<code c++>
CRhinoCommand::result CCommandTest::RunCommand( const CRhinoCommandContext& context )
{
  CRhinoGetObject go;
  go.SetCommandPrompt( L"Select objects to copy in-place" );
  go.EnableGroupSelect( TRUE );
  go.EnableSubObjectSelect( FALSE );
  go.GetObjects( 1, 0 );
  if( go.CommandResult() != CRhinoCommand::success )
    return go.CommandResult();

  ON_Xform xform;
  xform.Identity();

  ON_2dexMap group_map;

  for( int i = 0; i < go.ObjectCount(); i++ )
  {
    const CRhinoObject* object = go.Object(i).Object();
    if( object )
    {
      CRhinoObject* duplicate = context.m_doc.TransformObject( object, xform, true, false, true );
      if( duplicate )
        RhinoUpdateObjectGroups( duplicate, group_map );
    }
  }

  context.m_doc.Redraw();

  return CRhinoCommand::success;
}
</code>

Note, the **RhinoUpdateObjectGroups**, demonstrated above, is not found in the .NET SDK. But it does not take much to write your own. The following is an example of a **RhinoUpdateObjectGroups** equivalent function written in C#:

==== C# ====
<code c#>
static void MyRhinoUpdateObjectGroups(ref MRhinoObject obj, ref Dictionary<int, int> group_map)
{
  if (null == obj)
    return;

  int attrib_group_count = obj.Attributes().GroupCount();
  if (0 == attrib_group_count)
    return;

  MRhinoDoc doc = obj.Document();
  if (null == doc)
    return;

  MRhinoGroupTable group_table = doc.m_group_table;
  int group_count = group_table.GroupCount();
  if (0 == group_count)
    return;

  if (0 == group_map.Count)
  {
    for (int i = 0; i < group_count; i++)
      group_map.Add(i, -1);
  }

  On3dmObjectAttributes attrib = new On3dmObjectAttributes(obj.Attributes());

  Arrayint group_list = new Arrayint();
  attrib_group_count = attrib.GetGroupList(ref group_list);

  for (int i = 0; i < attrib_group_count; i++)
  {
    int old_group_index = group_list[i];
    int new_group_index = group_map[old_group_index];
    if (-1 == new_group_index)
    {
      new_group_index = doc.m_group_table.AddGroup(new OnGroup());
      group_map[old_group_index] = new_group_index;
    }
    group_list[i] = new_group_index;
  }

  attrib.RemoveFromAllGroups();
  for (int i = 0; i < attrib_group_count; i++)
    attrib.AddToGroup(group_list[i]);

  obj.ModifyAttributes(attrib, false);
}
</code>

And here is an example of its usage:

==== C# ====
<code c#>
public override IRhinoCommand.result RunCommand(IRhinoCommandContext context)
{
  MRhinoGetObject go = new MRhinoGetObject();
  go.SetCommandPrompt("Select objects to copy in-place");
  go.EnableGroupSelect(true);
  go.EnableSubObjectSelect(false);
  go.GetObjects(1, 0);
  if (go.CommandResult() != IRhinoCommand.result.success)
    return go.CommandResult();

  OnXform xform = new OnXform();
  xform.Identity();

  Dictionary<int, int> group_map = new Dictionary<int, int>();

  for (int i = 0; i < go.ObjectCount(); i++)
  {
    IRhinoObject obj = go.Object(i).Object();
    if (null != obj)
    {
      MRhinoObject duplicate = context.m_doc.TransformObject(obj, xform, true, false, true);
      if (null != duplicate)
        MyRhinoUpdateObjectGroups(ref duplicate, ref group_map);
    }
  }

  context.m_doc.Redraw();

  return IRhinoCommand.result.success;
}
</code>

\\

{{tag>Developer cplusplus dotnet}}
