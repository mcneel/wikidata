======Get the point at the current cursor position======
> **Developer:** //[[developer:cplusplusplugins|C++]], [[developer:dotnetplugins|.NET]]//
> **Summary:** //Discusses how to convert a 2-D screen point into a 3-D world point.//

=====Question=====
Is there way to convert a 2-D screen point, obtained from the mouse cursor position, to a 3-D point?

=====Answer=====
Yes there is. You will need to make sure the 2-D point is in screen coordinates, not client coordinates. Then, you can obtain a screen-to-world transformation from the active viewport that you can use to transform the point.

=====Example=====

====C++====

<code c++>
static bool GetPointAtCursorPos( ON_3dPoint& point )
{
  bool rc = false;
  CRhinoView* view = RhinoApp().ActiveView();
  if (view)
  {
    POINT pt;
    if (::GetCursorPos(&pt) )
    {
      view->ScreenToClient( &pt );
      ON_Xform xform;
      if( view->ActiveViewport().VP().GetXform(ON::screen_cs, ON::world_cs, xform) )
      {
        point = ON_3dPoint( pt.x, pt.y, 0.0 );
        point.Transform( xform );
        rc = true;
      }
    }
  }
  return rc;
}
</code>
====C#====
<code c#>
[System.Runtime.InteropServices.DllImport("user32.dll")]
public static extern bool GetCursorPos(out System.Drawing.Point pt);

[System.Runtime.InteropServices.DllImport("user32.dll")]
public static extern bool ScreenToClient(IntPtr hWnd, ref System.Drawing.Point pt);

public static bool GetPointAtCursorPos(ref On3dPoint point)
{
  bool rc = false;
  MRhinoView view = RhUtil.RhinoApp().ActiveView();
  if (view != null)
  {
    System.Drawing.Point pt;
    if (GetCursorPos(out pt) && ScreenToClient(view.m_hWnd.Handle, ref pt))
    {
      OnXform xform = new OnXform();
      if (view.ActiveViewport().VP().GetXform(IOn.coordinate_system.screen_cs, IOn.coordinate_system.world_cs, ref xform))
      {
        point = new On3dPoint(pt.X, pt.Y, 0.0);
        point.Transform(xform);
        rc = true;
      }
    }
  }
  return rc;
}
</code>

\\

{{tag>Developer cplusplus dotnet}}