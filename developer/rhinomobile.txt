=====RhinoMobile=====
{{:developer:rhinomobile_banner.png|}}
=====Downloads & Links=====

Developer Tools:
  * [[http://xamarin.com/download|Xamarin]] Starter Edition (aka: Free) or better.  30-day free trial and academic pricing available.
  * [[http://developer.apple.com/xcode/|Xcode]] on a Mac running OS X 10.8 (Mountain Lion) or greater is necessary for building iOS apps.
  * [[http://www.microsoft.com/visualstudio/eng/downloads|Visual Studio 2012]]: Non-Express editions only (Xamarin's extensions require paid versions).
  * [[http://software.intel.com/en-us/articles/intel-hardware-accelerated-execution-manager/|Intel Hardware Accelerated Execution Manager]] provides hardware-acceleration for Android emulators.

Required Libraries & Samples:
  * [[http://github.com/mcneel/rhinocommon|RhinoCommon]] The .NET plug-in SDK for Rhino and Grasshopper.
  * [[http://www.rhino3d.com/opennurbs|openNURBS]] Download: C++ openNURBS SDK.
  * [[http://github.com/mcneel/RhinoMobile|RhinoMobile]] (to be made public soon)
  * [[http://github.com/mcneel/RhinoMobileSamples|RhinoMobileSamples]] (to be made public soon)

=====Overview=====

  - [[rhinomobile#Intro to RhinoMobile|Intro to RhinoMobile]]: What is it and why should I care?
  - [[rhinomobile#Getting Started|Getting Started]]: Tooling up.
  - [[rhinomobile#HelloRhinoMobile|HelloRhinoMobile]]: Building a demo project.
  - [[rhinomobile#Xamarin Studio|Xamarin Studio]]: Getting used to the Xamarin IDE.
  - [[rhinomobile#Simulators & Emulators|Simulators & Emulators]]: How to properly setup simulators and emulators.
  - [[rhinomobile#Devices & Testing|Devices & Testing]]: How to get your devices setup for testing.
  - [[rhinomobile#Setup Your Project|Setup Your Project]]: Step-by-step setting up your own project.
  - [[rhinomobile#Rendering Pipeline|Rendering Pipeline]]: A walkthrough of how pixels are pumped to the screen.
  - [[rhinomobile#Using Visual Studio|Using Visual Studio]]: Some notes on using our favorite IDE.
  - [[rhinomobile#Other Links & Libraries|Other Links & Libraries]]: A collection of other useful libraries and resources.
=====Intro to RhinoMobile=====

**What is RhinoMobile?**
RhinoMobile is a C# .NET library for the development of 3D, cross-platform, mobile applications.  RhinoMobile - like RhinoCommon - is based on the Xamarin Mono framework, a fully-functional .NET runtime that works on Android, iOS and OS X.  RhinoMobile uses openNURBS (the 3dm NURBS library) and RhinoCommon  (the .NET SDK for Rhinoceros and Grasshopper) and handles file IO, gesture recognition and 3D display (OpenGL ES 2.0).

**Who should use RhinoMobile?**
Anyone interested in developing, prototyping, or just experimenting with 3D mobile development who wants to use C# and target as many devices as possible.  You should know some C# and .NET. Familiarity with RhinoCommon helps.

**Where can I get help?**
Visit the Rhino Forum and post your question in the [[http://discourse.mcneel.com/category/rhino-developer|Rhino Developer Category]] or e-mail the developer directly: [[mailto:dan@mcneel.com|dan@mcneel.com]].
=====Getting Started=====

First, you need to decide whether you will be developing in Windows or on a Mac.  This may come down to personal preference/familiarity, but it is important to remember that, if you wish to target iOS, you will need to have a Mac running Xcode (regardless of whether or not you use Visual Studio or Xamarin Studio in Windows).  Similarly, if you wish to target WindowsPhone, you will need to have a Windows PC running Visual Studio.  If you wish to use a Mac as your primary development computer, you will have to use Xamarin Studio.  In Windows, you can choose whether or not to use Xamarin Studio or Visual Studio with the Xamarin iOS and Android Extensions.  Users of Visual Studio can build and deploy to iOS over a network with a Mac "build box" attached.

The following Mac and Windows instructions presume you will be using Xamarin Studio.  (See the section on [[rhinomobile#Using Visual Studio|Visual Studio]] below for special instructions).

**Mac Instructions**
  - [[http://xamarin.com/download|Download and install Xamarin]].  Download the Xamarin Starter Edition.  The installer should install the //Mono Framework//, the //Android SDK//, //Xamarin Studio//, //Xamarin.Android// and //Xamarin.iOS// (//Xamarin.Mac// is optional). Once Xamarin Studio and all the associated tools are installed, start Xamarin Studio and make sure it is up-to-date.  On the upper toolbar, navigate to //Xamarin Studio// > //Check for Updates//.  Update and restart Xamarin Studio.
  - [[http://docs.xamarin.com/guides/cross-platform/getting_started/beginning_a_xamarin_trial|Start a Xamarin Trial]].  The Xamarin Starter edition allows you to unlock a 30-day trial of the full Business Edition, which will be necessary for using RhinoMobile.  You will need to create a Xamarin Login.  If you are unable to start a trial after creating a login, don't worry, Xamarin Studio will prompt you to when you try to build RhinoMobile projects.
  - [[http://itunes.apple.com/app/xcode/id497799835?ls=1&mt=12|Download and install Xcode]].  Xcode is free and can be downloaded from the App Store on and Apple Mac running OS X Mountain Lion.  Once Xcode is installed, you will need to get the Xcode command-line tools. In Xcode 4.3 and later, Xcode Command Line Tools do not come pre-installed, but need to be downloaded from within Xcode. (//Xcode// > //Preferences// > //Downloads Tab// > //Components Section // > //Command Line Tools// > //small download arrow//).
  - [[http://software.intel.com/en-us/articles/intel-hardware-accelerated-execution-manager/|Download and install the Intel Hardware Acceleration Execution Manager (HAXM)]]: HAXM provides a hardware-accelerated engine for the x86 Android emulators. Without HAXM, the emulators are nearly unusable, as their performance lags so much. However, with HAXM, the x86 emulators are responsive and usable. Not as fast as an actual device, but at least passable.  It’s available to install via the Android SDK manager, but the version there is ineffective. Instead, get it from the link above. Note that you’ll want to install the revised version available on that page.  HAXM will not work in a virtualized environment, e.g. a VM, so if you’re doing your Android development in a Windows VM, you will need to use a device.
  - [[http://github.com/mcneel/rhinocommon|Download or git RhinoCommon]].  You can either download RhinoCommon as a zip or clone the repository using git (recommended).  (If you are new to GitHub, there is a [[http://mac.github.com/|GitHub Mac App]] to get you started).  Decompress or clone rhinocommon in a convenient folder, such as ///Users/<you>/Development/Repositories/rhinocommon//.
  - [[http://www.rhino3d.com/opennurbs|Download openNURBS]].  Decompress openNURBS and place the contents in the //rhinocommon/c/opennurbs/// folder (the folder containing only the //readme.md// file).
  - [[http://github.com/mcneel/RhinoMobile|Download or git RhinoMobile]].  Decompress or clone RhinoMobile into a folder parallel to rhinocommon.  For example, if rhinocommon is in the ///Users/<you>/Development/Repositories/rhinocommon// folder, then RhinoMobile should be in the ///Users/<you>/Development/Repositories/RhinoMobile// folder.
  - [[http://github.com/mcneel/RhinoMobileSamples|Download or git RhinoMobileSamples]].  Decompress or clone RhinoMobileSamples into a folder parallel to rhinocommon and RhinoMobile.
  - Build openNURBS for iOS.  Open a Terminal window.  Change directories to the //rhinocommon/c// folder.  Run the //build_mobile.sh// script with the //ios// argument (//./build_mobile.sh ios//).  This script runs a pre-build check to see if you have the proper pre-requisites installed, then builds four different versions of libopennurbs: two arm architectures, one x86 for the simulator, and one universal bundle. Once the libraries have been built, move the libopennurbs*.a files into the //RhinoMobileSamples/HelloRhinoMobile/HelloRhino.Touch/libs// folder.
  - Build openNURBS for Android.  In a Terminal window, make sure you are in the //rhinocommon/c// folder.  Run the //build_mobile.sh// script with the //android// argument (//./build_mobile.sh android//).  This script runs a pre-build check to see if you have the proper pre-requisites installed, then builds three different versions of libopennurbs: two arm architectures and one x86 for the emulator.  Once the libraries have been built, move the //libs// folder into the //RhinoMobileSamples/HelloRhinoMobile/HelloRhino.Droid// folder.

**Windows Instructions**
  - [[http://xamarin.com/download|Download and Install Xamarin]].  Download the Xamarin Starter Edition.  The installer should install the //Mono Framework//, the //Android SDK//, //Xamarin Studio//, //Xamarin.Android// and //Xamarin.iOS// (//Xamarin.Mac// is optional). Once Xamarin Studio and all the associated tools are installed, start Xamarin Studio and make sure it is up-to-date.   Navigate to //Help// > //Check for Updates//.  Update and restart Xamarin Studio.
  - [[http://docs.xamarin.com/guides/cross-platform/getting_started/beginning_a_xamarin_trial|Start a Xamarin Trial]].  The Xamarin Starter edition allows you to unlock a 30-day trial of the full Business Edition, which will be necessary for using RhinoMobile.  You will need to create a Xamarin Login.  If you are unable to start a trial after creating a login, don't worry, Xamarin Studio will prompt you to when you try to build RhinoMobile projects as they use P/Invoke.
  - TO BE CONTINUED...
=====HelloRhinoMobile=====

=====Xamarin Studio=====

   * Command+. = Global Search (class:  line:)
   * Command+F = Find.  You can pin search results.
   * Command+D = Go to Declaration (find where it's declared)
   * Command+Shift+R = Go to References (show all occurrences)
   * Preferences.  Line numbers on.  Enable Source analysis.  Enable code folding, etc.
   * Alt+Enter = Context Actions (Resharper style)
   * Ctrl+Alt+Space = automatically add using directive
   * Alt + Up/Down arrows = take line up or down.
   * Alt + Shift + Up/Down arrows = expand/contract selection around cursor.
   * Debugger options: Debug project only code is on by default.  Switch it off if you want to step into non-project code.
=====Simulators & Emulators=====

=====Devices & Testing=====

=====Setup Your Project=====

Notes on the cloned project approach.

  - In Xamarin Studio, create an empty Solution.  For our purposes, we'll call this //YourProjectMobile//, but you can call it whatever you like, as long as you follow the naming conventions.
  - Add a new project to the //YourProjectMobile// Solution.  Use C# Library project.  Call it //YourProject.Core//.  This creates an empty project that will be used as the template for the Cloned Project.
  - Add an Android C# Library Project called //YourProject.Core.Droid//.
  - Add a iOS C# Library Project called //YourProject.Core.Touch//.
  - In Finder, move the contents of //YourProject.Core.Droid// and //YourProject.Core.Touch// into the //YourProject.Core// folder.
  - In Xamarin Studio, remove (not delete) all the added projects.
  - In Xamarin Studio, Add Existing projects //YourProject.Core.Touch// and //YourProject.Core.Droid// (this time from their new home in //YourProject.Core// folder) to the Solution.
  - Delete //YourProject.Core.csproj//.

TO BE CONTINUED...
=====Rendering Pipeline=====

=====Using Visual Studio=====

=====Other Links & Libraries=====