====== How to: Add a Brep Box Rhino ======
> **Developer:** //[[developer:cplusplusplugins|C++]]//
> **Summary:** //Demonstrates how to add a Brep Box from a Rhino C++ plug-in.//

The [[developer:opennurbs:home|openNURBS]] ON_BrepBox() returns an ON_Brep definition of a box. 

**Note:** ON_BrepBox() allocates memory for the ON_Brep, so the developer is reponsible for deleting the object when finished. 

In this example, we are adding the brep to Rhino, so Rhino will be responsible for deleting it.

===== C++ =====
<code c++>
CRhinoCommand::result CCommandTestSdk::RunCommand(const CRhinoCommandContext& context)
{
  CRhinoCommand::result rc = CRhinoCommand::nothing;

  // define the corners of the box
  ON_3dPointArray corners;
  corners.Append( ON_3dPoint( 0.0,  0.0,  0.0) );
  corners.Append( ON_3dPoint(10.0,  0.0,  0.0) );
  corners.Append( ON_3dPoint(10.0, 10.0,  0.0) );
  corners.Append( ON_3dPoint( 0.0, 10.0,  0.0) );
  corners.Append( ON_3dPoint( 0.0,  0.0, 10.0) );
  corners.Append( ON_3dPoint(10.0,  0.0, 10.0) );
  corners.Append( ON_3dPoint(10.0, 10.0, 10.0) );
  corners.Append( ON_3dPoint( 0.0, 10.0, 10.0) );

  // Build the brep  
  ON_Brep* pBrep = ON_BrepBox( corners );
  if( pBrep )
  {
    CRhinoBrepObject* pObject = new CRhinoBrepObject();
    pObject->SetBrep( pBrep );
    if( context.m_doc.AddObject(pObject) )
    {
      context.m_doc.Redraw();
      rc = CRhinoCommand::success;
    }
    else
    {
      delete pObject;
      pObject = 0;
      rc = CRhinoCommand::failure;
    }
  }
  return rc;
}

</code>

**Note:** If we called CRhinoDoc::AddBrepObject() instead of CRhinoDoc::AddObject(), we would be responsible for deleting the brep (pBrep) because CRhinoDoc::AddBrepObject() makes a copy of the input brep.

{{tag>Developer cplusplus}}
