====== How To: Replace Rhino's Color Picking Dialog ======
====== C++, .NET ======
> **Version:** //Rhino 4//

To replace Rhino's color picking dialog, derive a new class from CRhinoReplaceColorDialog and override the ColorDialog() virtual function. Note, if more that one CRhinoReplaceColorDialog-derived classes exist, then the last CRhinoReplaceColorDialog-derived object created will be displayed.

The following sample code demonstrates how to replace Rhino's color picking dialog. In this example, we will simply replace it with the Windows standard color picking dialog.

===== C++ =====
<code c++>
class CMyColorDialog : public CRhinoReplaceColorDialog
{
public:
  CMyColorDialog() : CRhinoReplaceColorDialog(::AfxGetStaticModuleState()) {};
  virtual ~CMyColorDialog() {};
  bool CMyColorDialog::ColorDialog( HWND hWndParent, 
                                    ON_Color& color, 
                                    bool bIncludeButtonColors, 
                                    const wchar_t* lpsDialogTitle )
  {
    CColorDialog dlg( color, CC_ANYCOLOR|CC_FULLOPEN, CWnd::FromHandle(hWndParent) );
    if( IDOK != dlg.DoModal() )
      return false;
    color = dlg.GetColor();
    return true;
  }
};

</code>
Now, create a new Rhino command and add a pointer to the above class as a public data member. Do not forget to initialize it's value to NULL in the command classes constructor. For example:


<code c++>
CMyColorDialog* m_pMyColorDialog;
...
CTestCommand::CTestCommand() : pMyColorDialog(NULL) {}

</code>
Finally, in your new command classes RunCommand() member, install the new color picker. For example:


<code c++>
CRhinoCommand::result CCommandTest::RunCommand( const CRhinoCommandContext& context )
{
  if( m_pMyColorDialog )
  {
    delete m_pMyColorDialog;
    m_pMyColorDialog = NULL;
    RhinoApp().Print( L"Rhino color dialog restored.\n" );
  }
  else
  {
    m_pMyColorDialog = new CMyColorDialog;
    if( m_pMyColorDialog )
      RhinoApp().Print( L"Rhino color dialog replaced.\n" );
    else
      RhinoApp().Print( L"Error replacing Rhino color dialog.\n" );
  }
  return CRhinoCommand::success;
}

</code>
For more information on the new CRhinoReplaceColorDialog class, see it's declaration in rhinoSdkUtilities.h.

===== VB.NET =====
<code vb>
Private Class VBColorDialog
  Inherits RMA.Rhino.MRhinoReplaceColorDialog

  Public Overrides Function ColorDialog(ByVal hWndParent As IWin32Window, _
                                        ByRef color As RMA.OpenNURBS.OnColor, _
                                        ByVal bIncludeButtonColors As Boolean, _
                                        ByVal lpsDialogTitle As String) As Boolean
    Dim dlg As New System.Windows.Forms.ColorDialog()
    If (dlg.ShowDialog(hWndParent) = Windows.Forms.DialogResult.OK) Then
      Dim c As System.Drawing.Color = dlg.Color
      color.SetRGBA(c.R, c.G, c.B, c.A)
      Return True
    End If
    Return False
  End Function
End Class

Private m_dlg As VBColorDialog = Nothing

Public Overrides Function RunCommand(ByVal context As IRhinoCommandContext) _
  As RMA.Rhino.IRhinoCommand.result
  If (m_dlg Is Nothing) Then
    m_dlg = New VBColorDialog()
  Else
    m_dlg.Dispose()
    m_dlg = Nothing
  End If
  Return IRhinoCommand.result.success
End Function
</code>
===== C# =====
<code c#>
private class CSColorDialog : RMA.Rhino.MRhinoReplaceColorDialog
{
  public override bool ColorDialog(System.Windows.Forms.IWin32Window hWndParent,
                                   ref OnColor color,
                                   bool bIncludeButtonColors,
                                   string lpsDialogTitle)
  {
    System.Windows.Forms.ColorDialog dlg = new System.Windows.Forms.ColorDialog();
    if( dlg.ShowDialog(hWndParent) == System.Windows.Forms.DialogResult.OK )
    {
      System.Drawing.Color c = dlg.Color;
      color.SetRGBA( c.R, c.G, c.B, c.A);
      return true;
    }
    return false;
  }
}

private CSColorDialog m_dlg = null;

///<summary> This gets called when when the user runs this command.</summary>
public override IRhinoCommand.result RunCommand(IRhinoCommandContext context)
{
  if (m_dlg == null)
  {
    m_dlg = new CSColorDialog();
  }
  else
  {
    m_dlg.Dispose();
    m_dlg = null;
  }
  return IRhinoCommand.result.success;
}

</code>


{{tag>Developer cplusplus dotnet}}
