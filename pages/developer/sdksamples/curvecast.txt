====== Determine Curve Object Types ======
====== C++ ======
> **Summary:** //Demonstrates how to determine the curve type using the Rhino SDK.//

=====Question=====
Given an **ON_Curve**, how can I determine which kind of **ON_Curve**-derived object it really is? (e.g. **ON_LineCurve**, **ON_ArcCurve**, **ON_PolylineCurve**, **ON_PolyCurve**, **ON_NurbsCurve**, etc.)?

=====Answer=====

Basically, you try to cast the **ON_Curve** object to one of the **ON_Curve**-derived classes using it's **Cast** operator. If the cast operation is success, you are good to go. If it fails, then you know the test object is some other **ON_Curve**-derived object.

=====Example=====

===== C++ =====
<code c++>

const ON_LineCurve* GetLineCurve( const ON_Curve* crv )
{
  const ON_LineCurve* p = 0;
  if( crv != 0 )
    p = ON_LineCurve::Cast( crv );
  return p;
}

const ON_ArcCurve* GetArcCurve( const ON_Curve* crv )
{
  const ON_ArcCurve* p = 0;
  if( crv != 0 )
    p = ON_ArcCurve::Cast( crv );
  return p;
}

const ON_PolylineCurve* GetPolylineCurve( const ON_Curve* crv )
{
  const ON_PolylineCurve* p = 0;
  if( crv != 0 )
    p = ON_PolylineCurve::Cast( crv );
  return p;
}

const ON_PolyCurve* GetPolyCurve( const ON_Curve* crv )
{
  const ON_PolyCurve* p = 0;
  if( crv != 0 )
    p = ON_PolyCurve::Cast( crv );
  return p;
}

const ON_NurbsCurve* GetNurbsCurve( const ON_Curve* crv )
{
  const ON_NurbsCurve* p = 0;
  if( crv != 0 )
    p = ON_NurbsCurve::Cast( crv );
  return p;
}

</code>
===== C# =====
<code c#>

public IOnLineCurve GetLineCurve(IOnCurve crv )
{
  IOnLineCurve p = null;
  if ( crv != null )
    p = OnLineCurve.ConstCast(crv);
  return p;
}

public IOnArcCurve GetArcCurve(IOnCurve crv )
{
  IOnArcCurve p = null;
  if ( crv != null )
    p = OnArcCurve.ConstCast(crv);
  return p;
}

public IOnPolylineCurve GetPolylineCurve(IOnCurve crv )
{
  IOnPolylineCurve p = null;
  if ( crv != null )
    p = OnPolylineCurve.ConstCast(crv);
  return p;
}

public IOnPolyCurve GetPolyCurve(IOnCurve crv )
{
  IOnPolyCurve p = null;
  if ( crv != null )
    p = OnPolyCurve.ConstCast(crv);
  return p;
}

public IOnNurbsCurve GetNurbsCurve(IOnCurve crv )
{
  IOnNurbsCurve p = null;
  if ( crv != null )
    p = OnNurbsCurve.ConstCast(crv);
  return p;
}

</code>
===== VB.NET =====
<code vb>

Public Function GetLineCurve(ByVal crv As IOnCurve) As IOnLineCurve
  Dim p As IOnLineCurve = Nothing
  If (crv IsNot Nothing) Then
    p = OnLineCurve.ConstCast(crv)
  End If
  Return p
End Function

Public Function GetArcCurve(ByVal crv As IOnCurve) As IOnArcCurve
  Dim p As IOnArcCurve = Nothing
  If (crv IsNot Nothing) Then
    p = OnArcCurve.ConstCast(crv)
  End If
  Return p
End Function

Public Function GetPolylineCurve(ByVal crv As IOnCurve) As IOnPolylineCurve
  Dim p As IOnPolylineCurve = Nothing
  If (crv IsNot Nothing) Then
    p = OnPolylineCurve.ConstCast(crv)
  End If
  Return p
End Function

Public Function GetPolyCurve(ByVal crv As IOnCurve) As IOnPolyCurve
  Dim p As IOnPolyCurve = Nothing
  If (crv IsNot Nothing) Then
    p = OnPolyCurve.ConstCast(crv)
  End If
  Return p
End Function

Public Function GetNurbsCurve(ByVal crv As IOnCurve) As IOnNurbsCurve
  Dim p As IOnNurbsCurve = Nothing
  If (crv IsNot Nothing) Then
    p = OnNurbsCurve.ConstCast(crv)
  End If
  Return p
End Function


</code>


{{tag>Developer cplusplus}}
