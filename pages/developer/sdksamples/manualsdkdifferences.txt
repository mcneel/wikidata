======Choosing an SDK======

=====Question=====

Rhino 4 plug-ins can be written using either the standard C++ SDK or the Rhino.NET SDK. Which one should I use?

=====Answer=====

It really depends on which programming language you are proficient at and what you are trying to do.

If you are a C++ developer, or you have a large C++ application that you would like to convert into a Rhino plug-in, you should probably use the standard C++ SDK.

If you are thinking of using Rhino.NET instead of the standard C++ SDK, here are some disadvantages and advantages to choosing Rhino.NET over the standard C++ SDK.

=====Disadvantages to choosing Rhino.NET=====

  * The Rhino.NET SDK is a wrapper around the standard C++ SDK. Because of this and the fact that .NET is somewhat slower than native compiled code, there will be a slight decrease in performance when using Rhino.NET versus C++. The performance loss is minimal and you probably won’t notice a difference.
  * There are some classes in the C++ SDK that are very hard to wrap for .NET so they may be missing from the Rhino.NET SDK. 

=====Advantages to choosing Rhino.NET=====

  * Free compiler. The C++ SDK requires a version of Visual Studio that you must purchase from Microsoft. On the other hand, you can create plug-ins for the Rhino.NET SDK with the free Visual Studio Express Editions. This is great for people who want to try out plug-in development.
  * Familiarity. If you already know VB.NET or C#, it isn’t as big of a jump as learning a new language (C++) and learning a large SDK.
  * Similar to C++ SDK. The classes and functions in Rhino.NET have extremely similar names and functionality. This means that if you get to a point where you need to convert your Rhino.NET plug-in to a C++ plug-in, you should be able to easily translate your .NET code to C++ within a short period of time.



