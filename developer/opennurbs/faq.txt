======openNURBS FAQ======
> **Developer:** //[[developer:opennurbs:home|openNURBS]]//
> **Summary:** //Frequently asked questions regarding the openNURBS Toolkit.//

=====Background=====
The [[developer:opennurbs:home|openNURBS]] Toolkit consists of C++ source code for a library that will read and write a [[developer:opennurbs:home|openNURBS]] 3-D model files (.3dm).  More than 400 software development teams and applications, including Rhinoceros(r), exchange 3-D models using the [[developer:opennurbs:home|openNURBS]] (.3dm) file format. [[rhino:rhinoceros|Rhinoceros]] is a registered trademark of Robert McNeel & Associates.


=====Audience=====
The [[developer:opennurbs:home|openNURBS]] Toolkit is intended for use by skilled C++ and .NET programmers. The [[developer:opennurbs:home|openNURBS]] Toolkit includes complete source code to create a library that will read and write 3dm files.  In addition, source code for several example programs is included.

=====Overview:=====
Currently, the [[developer:opennurbs:home|openNURBS]] Toolkit will read and write all information in Rhino version 2, 3, 4 and 5 files and read Rhino version 1 files.

In addition, the [[developer:opennurbs:home|openNURBS]] Toolkit provides [[rhino:nurbs|NURBs]] evaluation tools and elementary geometric and 3-D view manipulation tools.

=====Supported C++ compilers=====

The [[developer:opennurbs:home|openNURBS]] C++ toolkit has been successfully used with the following compilers:

  * **Microsoft Visual Studio 2010 (VC 10.0 SP1)** (Windows 7 Professional SP1)
    * To build opennurbs and the examples with Visual Studio 2010 SP1, use the solution build_opennurbs_vs2010.sln.
  * **gcc version 4.2.1** (Apple Build 5658)
    * To build opennurbs and the examples with gcc use the makefile.
  * **Apple Xcode 4.6.3** (4H1503) (OSX 10.8.2)
    * To build opennurbs and the examples with Xcode 4.5, use the workspace build_opennurbs_xcode.workspace.

The [[developer:opennurbs:home|openNURBS]] C++ source code is clean and fairly simple.  You
should be able to use any good C++ compiler that has 32-bit
integers, 32-bit or 64-bit pointers, and wchar_t support.

If you are using a good quality C++ compiler and run into some toolkit code that causes problems, please let us know and we'll attempt to change the code to accommodate the compiler.
=====Getting Started=====
If your goal is to read and write 3dm files, then you may find that the class ONX_Model::Read() and ONX_Model::Write() to be an easy way to attain your goal. See example_read.cpp and example_write.cpp for more details.

  - Compile the [[developer:opennurbs:home|openNURBS]] Toolkit library. In order to compile the example programs you must link with the [[developer:opennurbs:home|openNURBS]] Toolkit library.  Compile the library as described in the first paragraph of the Instructions section.
  - Study example_read\example_read.cpp. All of the [[developer:opennurbs:home|openNURBS]] geometry classes are derived from the ON_Geometry class.  If you need generic attribute information, there is probably a ON_Geometry member function that will answer your query.  See the Dump() function in example_read.cpp for code that demonstrates how to use the Cast() function to get at the actual class definitions.
  - Study example_write\example_write.cpp. If you want to write points, meshes, [[rhino:nurbs|NURBs]] curves, [[rhino:nurbs|NURBs]] surfaces, or trimmed [[rhino:nurbs|NURBs]] surfaces, you should be able to cut and paste most of what you need from the functions in example_write.cpp.  If you want to write trimmed surfaces or b-reps, then please study example_brep.cpp.
  - Study example_brep\example_brep.cpp. If you want to write solid models or more general b-reps, then you should first work through example_write.cpp and then work through example_brep.cpp.
  - The comments in the [[developer:opennurbs:home|openNURBS]] Toolkit header files are intended to be the primary source of documentation.  I suggest that you use a development environment that has high quality tags capabilities and a good class browser.
  - In the code you write include only opennurbs.h.  The opennurbs.h header file includes the necessary [[developer:opennurbs:home|openNURBS]] toolkit header files in the appropriate order.
  - Other
    * OpenNURBS uses UTF-16 to store text information in 3DM files and provides tools for converting UTF-16 strings to and from UTF-8, UTF-32 and wchar_t strings. The ON_wString class has wchar_t characters.
    * All memory allocations and frees are done through onmalloc(), onfree(), and onrealloc().  The source code that ships with [[developer:opennurbs:home|openNURBS]] simply has onmalloc() call malloc() and onfree() call free().
    * If you want to use Open GL to render [[developer:opennurbs:home|openNURBS]] geometry, then you may want to include opennurbs_gl.h after opennurbs.h and add opennurbs_gl.cpp to your [[developer:opennurbs:home|openNURBS]] Toolkit library. See example_gl.cpp for more details.
    * The [[developer:opennurbs:home|openNURBS]] Toolkit is works correctly on both big and little endian CPUs.  (Generally, Intel CPUs use little endian byte order and MIPS, Motorola, and Sparc CPUs use big endian byte order.)

=====Support=====

If you have a question concerning the [[developer:opennurbs:home|openNURBS]] Toolkit that is not answered here or covered in the examples, then please post your question on the support newsgroup at news://news.mcneel.com/opennurbs If you are at a location that does not permit access to news://news.mcneel.com/opennurbs, then you can use the web version of the newsgroup at http://news2.mcneel.com/scripts/dnewsweb.exe?cmd=xover&group=[[developer:opennurbs:home|opennurbs]] You can search archived newsgroup messages at http://news2.mcneel.com/scripts/dnewsweb.exe?cmd=f_search&utag=


=====Examples=====

  * example_read\example_read.cpp:
    * Create a program by compiling example_read.cpp and statically linking with the [[developer:opennurbs:home|openNURBS]] library.  The code in example_read.cpp illustrates how to read an [[developer:opennurbs:home|openNURBS]] .3dm file.
  * example_write\example_write.cpp:
    * Create a program by compiling example_write.cpp and linking with the [[developer:opennurbs:home|openNURBS]] library.  The code in example_write.cpp illustrates how to write layers, units system and tolerances, viewports, spotlights, points, meshes, [[rhino:nurbs|NURBs]] curves, [[rhino:nurbs|NURBs]] surfaces, trimmed [[rhino:nurbs|NURBs]] surfaces, texture and bump map information, render material name, and material definitions to an [[developer:opennurbs:home|openNURBS]] .3dm file.
    * The bitmap in example_write\example_texture.bmp is used for a rendering material texture in example_write\example_write.cpp.
  * example_brep\example_brep.cpp:
    * Create a program by compiling example_brep.cpp and linking with the [[developer:opennurbs:home|openNURBS]] library. The code in example_write.cpp illustrates how to write a solid model.
  * example_dump\example_dump.cpp:
    * Create a program by compiling example_dump.cpp and linking with the [[developer:opennurbs:home|openNURBS]] library.  The code in example_dump demonstrates the low level structure of an [[developer:opennurbs:home|openNURBS]] .3DM file.
  * example_userdata\example_userdata.cpp:
    * Create a program by compiling example_userdata.cpp and linking with the [[developer:opennurbs:home|openNURBS]] library. The code in example_userdata demonstrates how to create and manage arbitrary user defined information in .3DM files.


===The Open GL example:===

Past versions of opennurbs have included a crude version of an
Open GL example.  The code for this example is still included in
the current version, but we no longer provide support for using
OpenGL with opennurbs.  Nothing has changed in opennurbs to with
respect to using OpenGL; we simply do not have the resources to
provide quality OpenGL support on the wide variety of platforms
where opennurbs is used.


=====Versions of 3DM files=====

  - **Version 1 3DM files.** The [[developer:opennurbs:home|openNURBS]] toolkit will read version 1 files. Rhino 1 and other applications using the old Rhino I/O toolkit create version 1 files.
  - **Version 2 3DM files.** The [[developer:opennurbs:home|openNURBS]] toolkit will read and write version 2 files. Rhino 2 and applications using an [[developer:opennurbs:home|openNURBS]] toolkit released on or after December 2000 create version 2 files.  (Rhino 1 and the old Rhino I/O toolkit will not read version 2 files.)
  - **Version 3 3DM files.** The [[developer:opennurbs:home|openNURBS]] toolkit will read and write version 3 files. Rhino 3 and applications using an [[developer:opennurbs:home|openNURBS]] toolkit released on or after October 2002 create version 3 files.  (Rhino 1 and Rhino 2 will not read version 2 files.)
  - **Version 4 3DM files.** The [[developer:opennurbs:home|openNURBS]] toolkit will read and write version 4 files. Rhino 4 and applications using an [[developer:opennurbs:home|openNURBS]] toolkit released on or after September 2006 create version 4 files.  (Rhino 1, Rhino 2, and Rhino 3 will not read version 4 files.)
  - **Version 5 3DM files.** The [[developer:opennurbs:home|openNURBS]] toolkit will read and write version 5 files. Rhino 5 and applications using an [[developer:opennurbs:home|openNURBS]] toolkit released on or after September 2009 create version 5 files.  (Rhino 1, Rhino 2, Rhino 3 and Rhino 4 will not read version 5 files.)

=====Vertex ordering in ON_Mesh faces=====

All faces in a ON_Mesh are stored with vertices listed in counter-clockwise order. In particular, for quads the vertices are ordered as

   v3-----v2
   |       |
   v0-----v1

The quads may be non-planar.

The definition of

   void ON_GL( const ON_Mesh& )

in opennurbs_gl.cpp demonstrates how to go through an ON_Mesh and render all the quads as two triangles.


=====Orientation of ON_Brep faces=====

The "UV" orientation of surfaces in a Brep is arbitrary.  If the

   BOOL ON_BrepFace::m_bRev

member is FALSE, then the face's orientation agrees with the surface's natural Du X Dv orientation.  When the member is TRUE, the face's orientation is opposite the surface's natural Du X Dv orientation.

If your application cannot handle ON_BrepFaces that have a TRUE m_bRev flag, then call ON_Brep::FlipReversedSurfaces(). See the comments in ON_Brep::FlipReversedSurfaces() and ON_Brep::SwapFaceParameters() for details.

=====Trimming loop order and nesting=====

The ON_BrepLoop::m_type member records the type of boundary (inner, outer, etc.).  A ON_BrepFace has exactly one outer loop and it is the first loop referenced in the ON_BrepFace::m_li[] array.  The inner loops all define "holes" in the ON_BrepFace.  All of the inner holes lie inside of the outer loop.  A ON_BrepFace is always path connected. In particular, inner loops are not "nested".

=====Surfaces in Rhino are read as ON_Breps=====

Internally, Rhino stores all surfaces as some type of b-rep and the [[developer:opennurbs:home|openNURBS]] toolkit reads these objects as b-reps.  To see if an entire

ON_Brep is really just a surface, use

   BOOL ON_Brep::IsSurface()

If ON_Brep::IsSurface() returns TRUE, then the b-rep geometry is the same as the surface ON_Brep::m_S[0].

To see of a particular face in a b-rep is really just a surface, use

   BOOL ON_Brep::FaceIsSurface( face_index )

If ON_Brep::FaceIsSurface( face_index ) returns TRUE, then the face's geometry is the same as the surface ON_Brep::m_S[face.m_si].

=====Who is funding the openNURBS Initiative and why?=====
Robert McNeel & Associates. They feel that the 3-D market is stifled because of the inability to reliably transfer 3-D geometry between applications. The problem is too big for us to solve alone. By funding the operating cost of openNURBS, others will get involved in the toolkit design and development. It will be a much cheaper and effective way to solve the problem.

===== Rhino =====


For details about Rhino, please visit the Rhino web site at [[http://www.rhino3d.com|http://www.rhino3d.com]].

\\

{{tag>Developer openNURBS}}