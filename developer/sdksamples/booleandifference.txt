====== How To: Boolean Difference ======

The following sample code demonstrates how to perform a Boolean Difference operation on two sets of polysurfaces using the Rhino 4.0 SDK.

===== C++ =====
<code c++>
CRhinoCommand::result CCommandTest::RunCommand( const CRhinoCommandContext& context )
{
  CRhinoGetObject go;
  go.SetCommandPrompt( L"Select first set of polysurfaces" );
  go.SetGeometryFilter( CRhinoGetObject::polysrf_object );
  go.EnablePreSelect( TRUE );
  go.GetObjects( 1, 0 );
  if( success != go.CommandResult() )
    return go.CommandResult();

  ON_SimpleArray<const ON_Brep*> InBreps0( go.ObjectCount() );
  int i;
  for( i = 0; i < go.ObjectCount(); i++ )
  {
    const ON_Brep* brep = go.Object(i).Brep();
    if( brep )
      InBreps0.Append( brep );
  }

  go.SetCommandPrompt( L"Select second set of polysurfaces" );
  go.EnablePreSelect( FALSE );
  go.EnableDeselectAllBeforePostSelect( false );
  go.GetObjects( 1, 0 );
  if( success != go.CommandResult() )
    return go.CommandResult();

  ON_SimpleArray<const ON_Brep*> InBreps1( go.ObjectCount() );
  for( i = 0; i < go.ObjectCount(); i++ )
  {
    const ON_Brep* brep = go.Object(i).Brep();
    if( brep )
      InBreps1.Append( brep );
  }

  ON_SimpleArray<ON_Brep*> OutBreps;
  ON_SimpleArray<int> InputIndexForOutput;
  bool something_happened = false;
  double tolerance = context.m_doc.AbsoluteTolerance();

  bool rc = RhinoBooleanDifference( 
        InBreps0, 
        InBreps1, 
        tolerance, 
        &something_happened, 
        OutBreps, 
        InputIndexForOutput 
        );

  if( !rc | !something_happened )
  {
    for( i = 0; i < OutBreps.Count(); i++ )
    {
      delete OutBreps[i];
      OutBreps[i] = 0;
    }
    return nothing;
  }

  for( i = 0; i < OutBreps.Count(); i++ )
  {
    ON_Brep* brep = OutBreps[i];
    if( brep )
    {
      context.m_doc.AddBrepObject( *brep );
      brep = 0;
      delete OutBreps[i];
      OutBreps[i] = 0;
    }
  }

  context.m_doc.Redraw();
  return success;
}
</code>
===== VB.NET =====
<code vb>
Public Overrides Function RunCommand(ByVal context As IRhinoCommandContext) _
  As IRhinoCommand.result
  Dim go As New MRhinoGetObject()
  go.SetCommandPrompt("Select first set of polysurfaces")
  go.SetGeometryFilter(IRhinoGetObject.GEOMETRY_TYPE_FILTER.polysrf_object _
                    Or IRhinoGetObject.GEOMETRY_TYPE_FILTER.surface_object)
  go.EnablePreSelect(True)
  go.GetObjects(1, 0)
  If (go.CommandResult() <> IRhinoCommand.result.success) Then
    Return go.CommandResult()
  End If

  Dim InBreps0 As New System.Collections.Generic.List(Of IOnBrep)()
  For i As Integer = 0 To go.ObjectCount() - 1
    Dim brep As IOnBrep = go.Object(i).Brep()
    If (brep IsNot Nothing) Then InBreps0.Add(brep)
  Next

  go.SetCommandPrompt("Select second set of polysurfaces")
  go.EnablePreSelect(False)
  go.EnableDeselectAllBeforePostSelect(False)
  go.GetObjects(1, 0)
  If (go.CommandResult() <> IRhinoCommand.result.success) Then
    Return go.CommandResult()
  End If

  Dim InBreps1 As New System.Collections.Generic.List(Of IOnBrep)()
  For i As Integer = 0 To go.ObjectCount() - 1
    Dim brep As IOnBrep = go.Object(i).Brep()
    If (brep IsNot Nothing) Then InBreps1.Add(brep)
  Next

  Dim OutBreps As OnBrep() = Nothing
  Dim InputIndexForOutput As New Arrayint()
  Dim something_happened As Boolean = False
  Dim tolerance As Double = context.m_doc.AbsoluteTolerance()

  Dim rc As Boolean = RhUtil.RhinoBooleanDifference( _
    InBreps0.ToArray(), _
    InBreps1.ToArray(), _
    tolerance, _
    something_happened, _
    OutBreps, _
    InputIndexForOutput)

  If (Not rc Or Not something_happened) Then
    Return IRhinoCommand.result.nothing
  End If

  For i As Integer = 0 To OutBreps.Length - 1
    Dim brep As OnBrep = OutBreps(i)
    If (brep IsNot Nothing) Then
      context.m_doc.AddBrepObject(brep)
    End If
  Next
  context.m_doc.Redraw()
  Return IRhinoCommand.result.success
End Function
</code>

===== C# =====
<code c#>
public override IRhinoCommand.result RunCommand(IRhinoCommandContext context)
{
  MRhinoGetObject go = new MRhinoGetObject();
  go.SetCommandPrompt("Select first set of polysurfaces");
  go.SetGeometryFilter( IRhinoGetObject.GEOMETRY_TYPE_FILTER.polysrf_object );
  go.EnablePreSelect( true );
  go.GetObjects( 1, 0 );
  if( go.CommandResult() != IRhinoCommand.result.success )
    return go.CommandResult();

  System.Collections.Generic.List<IOnBrep> InBreps0 =
       new System.Collections.Generic.List<IOnBrep>();
  for( int i=0; i<go.ObjectCount(); i++ )
  {
    IOnBrep brep = go.Object(i).Brep();
    if( brep != null )
      InBreps0.Add( brep );
  }

  go.SetCommandPrompt( "Select second set of polysurfaces" );
  go.EnablePreSelect( false );
  go.EnableDeselectAllBeforePostSelect( false );
  go.GetObjects( 1, 0 );
  if( go.CommandResult() != IRhinoCommand.result.success )
    return go.CommandResult();

  System.Collections.Generic.List<IOnBrep> InBreps1 =
       new System.Collections.Generic.List<IOnBrep>();
  for( int i=0; i<go.ObjectCount(); i++ )
  {
    IOnBrep brep = go.Object(i).Brep();
    if( brep != null )
      InBreps1.Add( brep );
  }

  OnBrep[] OutBreps = null;
  Arrayint InputIndexForOutput = new Arrayint();
  bool something_happened = false;
  double tolerance = context.m_doc.AbsoluteTolerance();

  bool rc = RhUtil.RhinoBooleanDifference(
    InBreps0.ToArray(), 
    InBreps1.ToArray(),
    tolerance,
    ref something_happened,
    out OutBreps,
    ref InputIndexForOutput );

  if( !rc | !something_happened )
    return IRhinoCommand.result.nothing;

  for( int i=0; i<OutBreps.Length; i++ )
  {
    OnBrep brep = OutBreps[i];
    if( brep != null )
      context.m_doc.AddBrepObject( brep );
  }
  context.m_doc.Redraw();
  return IRhinoCommand.result.success;
}
</code>

{{tag>Developer cplusplus dotnet}}
