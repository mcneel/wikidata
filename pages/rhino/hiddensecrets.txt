======Rhino's Hidden Secrets======

>**Dozens of tips and shortcuts** from Rhino experts to facilitate common tasks and save you hours of time! **Note: This page needs to be updated for Rhino 6.**


=====1. The TAB direction lock key=====

Once you have made your first pick inside a command like **Line** or **Scale**, if you press the **TAB** key before your second click, it constrains the direction to an axis between the first pick point and //the mouse cursor position at that moment//.  Once constrained, you can move anywhere along this axis to make your second pick point.  Works with any command requiring two points for direction input.  Also particularly useful in combination with object snaps and Ortho mode.

=====2. Dynamic camera manipulation=====
**[[CameraManipulation|Page with explanatory animations.]]**

Drag with the right mouse button in conjunction with **Ctrl** and **Shift** keys to pan and zoom.  Dragging the right mouse button alone rotates or pans the view.  If you have a roller type middle mouse button you can use that for dynamic zoom.

The **Camera** command (keyboard shortcut **F6**) gives you the option to Show or Hide the //Camera-cone//. You can easily manipulate the camera properties by dragging points on the cone. Useful if you need a view from a specific point and direction.

=====3. The Dragmode command=====

With the UVN option locks Ortho to Surface U and V instead of CPlane X and Y when dragging surface control points. Remember to reset **Dragmode** to CPlane when you want the default behavior back.

=====4. Selection filters=====

You can filter selection with keyboard (command line) filters in many cases -- the most useful is **crv** for filtering curves. Example: If you want to trim with an edge curve rather than the entire surface, start **Trim**, then at the prompt to select the cutting objects, type **crv** and Enter. Now if you click on the edge of the surface, the edge curve will be selected as the trimming object. There is no need to **DupEdge** to get a curve in place of the edge to trim with.  If you use this a lot with the **Split** command, you can create a macro like this (works only with the surface to split being preselected):  ! //split pause crv   If you use the crv option with the Trim command, you can create this macro (works only with nothing preselected): ! //Trim crv

=====5. Render previews=====

In the basic Rhino renderer or Flamingo the **RenderPreview** command makes a quick and dirty rendering that is useful for seeing lighting, color, and composition without waiting for a full rendering. Use **RenderPreviewWindow** to render just a section of the viewport. It's even quicker.

=====6. Trimming=====

While trimming lines, use **Fillet** with radius 0 to trim and join corners. Since **Fillet** remembers its settings, and you will likely use fillets more often than chamfers, it may be more convenient to use **Chamfer** for this trick. Set both distances to zero  and let **Fillet** remember the radii you are actually using to fillet, rather than reverting to zero each time you make a sharp corner. V4 has the **Connect** command to take care of this.

=====7.  Drag 'n Drop files into Rhino=====

Dragging a Rhino-openable file onto the taskbar button of a running Rhino instance or into a Rhino window gives you with a dialog with choices **Open**, **Insert**, **Import**, or **Attach**. Just choose one and **OK**.  Beats navigating via the file browser window!  Files can be //any// type Rhino can open, .3DM, IGES, STEP, etc...  You can drag n' drop several files at once.  //<color darkslategray>\\ 
\\
As of XP SP 2 and later versions of windows, you can no longer drop your files directly onto the taskbar button.  Instead of releasing the mouse button when you're over the taskbar button, continue to hold it down. In an instant, the associated Rhino window will come to the front. Drop your files there.</color>//

>//In V4 and V5, you can drag and drop [[developer:rhinoscript|RhinoScript]] (*.rvb) files onto the Rhino window to load the script. There are new script methods to automatically add the script to the Rhino startup scripts and to add command aliases to run the script. See the RhinoScript Help files for more info.//

=====8.  Line length constraint=====

Entering a numeric distance after selecting the start point in the **Line** command constrains the line length, whatever location you choose for the end point.  This even works for **Polyline** segments and other cases as well. The distance constraint is useful in placing points in a curve, moving objects etc as well.

=====9.  Schemes=====

You can save and restore Rhino workspace settings using a **scheme**. Basically, schemes are Windows Registry Keys (reg folders) that contain:

  * Command defaults.
  * Dialog box positions.
  * All settings in the Rhino Options pages such as aliases, appearance and colors settings, mouse settings, render settings, shortcut keys.
  * Recently-used file list.
  * The Workspace (toolbar collection) used and its layout.

  * **//Whether plug-ins are loaded or unloaded cannot be controlled via Schemes.//**

To save a scheme, create a shortcut with the destination //C:\Program Files\Rhino4.exe" /scheme="YOURSCHEME// //[or ...Rhino3.exe...]//. Launch Rhino with it. Then set your Rhino workspace and options the way you prefer. Your settings will be saved in the Registry key //HKEY_CURRENT_USER\Software\McNeel\Rhinoceros\4.0\Scheme: YOURSCHEME// //[or ...\3.0\...]//.

If you're familiar with it, you can use **regedit** to edit your information directly in the Windows Registry. It's possible to create any number of different shortcuts or schemes, which helps a lot if there's more than one Rhino user at the same machine.

<color darkslategray> //Mitch says: This is a great feature!  I have four different schemes on my desktop for different languages, workspace configurations, etc. Unfortunately it **really** needs to be settable from within Rhino. That is, you should be able to directly save the current scheme, rather than creating a new, blank default scheme and having to modify all that stuff, or trying to copy registry keys.//</color>

**[[rhino:schemes|More information on working with schemes in Rhino.]]**

=====10.  Selection methods=====

One obvious thing that many people have overlooked (myself included) is that if you drag select to the **left**, creating a **crossing box** (dashed lines), anything you touch will be selected, even if the entire object is not enclosed by the selection square.  If you drag **right** to select, creating the **window box** (solid lines), then you have to completely enclose the object you are trying to select with the square.  Knowing when to use which type of selection can save you many seconds of frustration as you try to select just that one object you want to work with. Just make sure your selection method is set to **Combo** in the Rhino //Options --> Mouse//. And here is a useful tip: //Holding the ALT key while selecting avoids dragging the objects//.

> **Comment:** //You can also specify the Crossing Window or Window by typing **C** or **W** before using a window selection. It will override the combo option, for those times you want a crossing window while needing to select from right to left.//

=====11.  Object snaps=====

Right-clicking on an object snap checkbox makes the clicked one active. All the others become unchecked. Holding down the Alt key temporarily suspends Osnaps without unchecking any boxes.


=====12.  Arrow Keys=====

Using the Arrow Keys to incrementally alter the view from any viewport is a great way to move about complementing the more fluid dynamic pan used by alt-clicking in the perspective view.

You can also use the arrow keys for nudging, that is, moving objects and control points incrementally a controlled distance.  The addition of **Ctrl** and **Shift** with the arrows allows for three different distance settings. These settings are found in Options/Modeling aids.  You may use the arrow keys alone (which disables the above mentioned view manipulation) or use the Alt+arrow keys if you wish to conserve the view functions.  The arrows nudge objects ortho to the active CPlane or World according to the option selected. PageUp and PageDown also serve as the Z-direction arrow keys.


=====13.  Home and End keys=====

Using the Home and End keys to **UndoView** and **RedoView** is a great way to go back and forth along the view history.

=====14.  Filleting edges of a solid=====

Make the unfilleted shape and get all the surfaces to join together to make a closed polysurface.  Check that it is closed with **Rhino > Edit > ObjectProperties > Object > Details** (button).  You can also check using the **ShowEdges** command in the NakedEdges mode.  You can practice all this with a simple Box.

Make the largest-radius fillets first with the **FilletEdge** command, selecting all the adjacent edges you want filleted at that radius in the same operation.  Fill any holes the fillet-making creates.  This takes planning.

Make the smaller-radius fillets, including all the adjacent edges that need rounding (possibly including some edges made by the larger-radius filleting).  Check for closure again.

You can also fillet all the edges of a solid at once with the same radius by starting the command and window selecting the object.

**[[rhino:advancedfilleting|Some advanced filleting examples.]]**

=====15. Toolbars can be hidden/shown=====

Toolbars can be hidden/shown with a macro like: //-//Toolbar //Toolbar "Default" //Toggle "Main1" //Enter _Enter//.

The default is the workspace or Collection name -- in quotes if it has spaces in the name. Main1 is the individual toolbar name, also in quotes if it has spaces. Either way I put them so I don't have to think about it. You can also put Show or Hide where the toggle is if you want to be more explicit about it.

<color darkslategray>Mitch says: If you have only one workspace open at a time, you can use an enter instead of naming the workspace -</color> //-Toolbar Toolbar Enter Toggle Toolbarname Enter Enter//.

For entire workspaces you can use Close or Open: //-Toolbar //Collection //Open "BonusTools" Enter Enter//.

>//In Rhino V4, you can right-click in a blank spot in the toolbar docking area to display a list of toolbars. Click the checkbox to display. Also a Lock Toolbars checkbox is at the bottom of the list.//

=====16. Use the Dot command to attach visible labels to your objects=====

Use the pre-numbered dots 0-9 or just the **Dot** command and type your own text.  These are all in the **Annotate** toolbar. Dots have the advantage of always being parallel to the view plane and the same size, no matter which way the model is rotated or zoomed.  Disadvantages: You can't change size or text style. They are internal to Rhino only (not exported).  Tip: For strings of text with spaces, enclose the phrase in quotes.

>//In Rhino V4, double-click on a text dot to edit the contents. You can use this to add text with spaces. Add a dot with any text, double-click and add the text with spaces in the edit box. No double quotes needed in the edit box. V4 also has added the **SelDot** command for selecting dots.//

=====17. Use the CheckNewObjects command to detect errors as objects are created=====

This command is a tool to find bugs that create invalid geometry in the model. It is disabled by default.

To enable it, type **CheckNewObjects** at the Command prompt.

This feature makes it possible to find and fix the cause of bad geometry entering the model.

If you are comfortable helping us debug Rhino (and find bad objects for your own purposes), please enable this feature.

How CheckNewObjects works: Every time an object is created or imported from a file, Rhino runs the Check command. If Check determines that the object is bad, Rhino displays a dialog box informing you of the problem. This message will appear once for each bad object created.

Check is a time-consuming process. It can make importing files and working with complex solids somewhat slower. If you find that it slows Rhino down too much, you can disable it by typing CheckNewObjects at the command prompt.

**[[rhino:badobjects|More info here on Bad Objects and how to avoid or fix them.]]**

=====18. Using PictureFrames as background bitmaps=====
Use [[rhino:pictureframes|PictureFrames]] to make a more flexible and powerful version of Rhino's [[rhino:backgroundbitmap|BackgroundBitmap]]. Images are attached as texture maps to planes in 3D space and displayed in rendered mode, showing the texture map, instead of placed in the background of the viewport independent of geometry.

Some advantages to using PictureFrames:

  * An unlimited number of images can be placed in the scene. View in any and all viewports.
  * Scale and rotate images as needed. This is unlike BackgroundBitmaps which align only with the cplane  X and Y.
  * Images can be dimmed and made more or less transparent.

A possible disadvantage is that there is no guarantee that the image will always be behind everything in space. PictureFrames are just objects in 3D space.

**[[rhino:pictureframes|More info on how to use PictureFrames as reference images.]]**



=====19. Getting the best display of background bitmaps=====

**[[rhino:backgroundbitmap|Some tips on getting the BackgroundBitmap command to display images cleanly.]]**



=====20. Use FullScreen Mode to present a design=====
FullScreen fills the monitor screen with the viewports, hiding menus, status bar, toolbars, command prompt, and windows title bar. Press **ESC** to return to normal view.

The hyphenated version adds command line options. :)

=====21. Measure on the fly =====
The **Length, Distance** & **Radius** commands are nestable, so you can use the result of say Radius to set the radius in the **Fillet** or **FilletEdge** etc commands. Start **Fillet**, click Radius at the command line, now type 'Radius' and <Enter> and select any non-linear curve - when you click, that radius value is sent back to the still running Fillet command as the new radius. i.e. you can match another fillet exactly.




